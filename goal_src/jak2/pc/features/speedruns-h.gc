;;-*-Lisp-*-
(in-package goal)

;; TEST - safe with malformed entries

(deftype speedrun-timer (process)
  ((draw? symbol)
   (started? symbol)
   (stopped? symbol)
   (start-time time-frame)
   (end-time time-frame)
   (recorded-time float))
  (:methods
    (draw-timer (_type_) none :behavior speedrun-timer)
    (start! (_type_) none :behavior speedrun-timer)
    (reset! (_type_) none :behavior speedrun-timer)
    (stop! (_type_) float :behavior speedrun-timer))
  (:state-methods
    idle))

(defbehavior speedrun-timer-init speedrun-timer ()
  (set! (-> self draw?) #f)
  (set! (-> self started?) #f)
  (set! (-> self start-time) 0)
  (set! (-> self end-time) 0)
  (set! (-> self recorded-time) 0.0)
  (go-virtual idle)
  (none))

(defstate idle (speedrun-timer)
  :virtual #t
  :code (behavior ()
    (until #f
      (when (-> self draw?) (draw-timer self))
      (suspend))
    (none)))

;; TODO - put in util
(deftype objective-zone (process)
  ((start? symbol)
   (v1 vector :inline)
   (v2 vector :inline)
   (on-enter (function none))
   (on-exit (function none)))
  (:methods
    (draw-zone (_type_) none))
  (:state-methods
    waiting-for-player
    player-inside))

(deftype objective-zone-init-params (structure)
  ((v1 vector :inline)
   (v2 vector :inline)))

(defenum speedrun-practice-flags
  :type uint64
  (none 0))

;; reset method
(deftype speedrun-practice-objective (structure)
  ((index int32 :offset-assert 0)
   (flags speedrun-practice-flags :offset-assert 8)
   (completed-task game-task :offset-assert 16)
   (features game-feature :offset-assert 24)
   (secrets game-secrets :offset-assert 32)
   (starting-position vector :offset-assert 36)
   (starting-rotation vector :offset-assert 40)
   (starting-camera-position vector :offset-assert 44)
   (starting-camera-rotation matrix :offset-assert 48)
   (end-task game-task :offset-assert 52)
   (start-zone-init-params objective-zone-init-params :offset-assert 56)
   (start-zone (pointer objective-zone) :offset-assert 60)
   (end-zone-init-params objective-zone-init-params :offset-assert 64)
   (end-zone (pointer objective-zone) :offset-assert 68))
  (:methods
   (draw-info (_type_) none)
   (reset! (_type_) none)))


(defenum speedrun-category
  :type uint32
  ;; Main Categories
  (newgame-normal 0)
  (newgame-heromode 1)
  ;; ILs
  (fortress-escape	2)
  (city-help-kid	3)
  (city-vehicle-training	4)
  (ruins-tower	5)
  (atoll-water	6)
  (fortress-dump	7)
  (city-krew-delivery	8)
  (city-red-gun-training	9)
  (atoll-sig	10)
  (sewer-enemy	11)
  (strip-rescue	12)
  (atoll-battle	13)
  (mountain-lens	14)
  (mountain-gear	15)
  (mountain-shard	16)
  (mountain-collection	17)
  (city-keira-delivery	18)
  (stadium-board1	19)
  (city-krew-collection	20)
  (city-yellow-gun-training	21)
  (drill-eggs	22)
  (city-power	23)
  (palace-cable	24)
  (palace-boss	25)
  (city-shuttle	26)
  (ruins-enemy	27)
  (city-blue-gun-training	28)
  (forest-scouts	29)
  (city-escort-kid	30)
  (dig-knock-down	31)
  (strip-grenade	32)
  (drill-ship	33)
  (city-port-run	34)
  (city-meet-brutter	35)
  (sewer-board	36)
  (forest-hunt	37)
  (city-intercept-tanker	38)
  (stadium-race-class3	39)
  (city-protect-water-slums	40)
  (dig-find-totem	41)
  (city-destroy-guard-vehicles	42)
  (city-play-onin-game	43)
  (canyon-insert-items	44)
  (tomb-poles	45)
  (tomb-water	46)
  (tomb-boss	47)
  (fortress-save-friends	48)
  (sewer-escort	49)
  (city-dark-gun-training	50)
  (stadium-race-class2	51)
  (city-stop-bomb-bots	52)
  (city-errol-challenge	53)
  (strip-drop	54)
  (ruins-mech	55)
  (forest-protect	56)
  (drill-mech	57)
  (city-save-lurkers	58)
  (stadium-race-class	59)
  (palace-sneak-in	60)
  (castle-break-in	61)
  (castle-boss	62)
  (city-whack	63)
  (under-mech	64)
  (under-sig	65)
  (city-defend-stadium	66)
  (consite-find-baron	67)
  (nest-get-to-gun	68)
  (nest-enter	69)
  (nest-boss	70)
  ;; TODO - add ILs and such later
  ;; there's no point in adding categories that just start from a new-game and have later restrictions
  ;; because we aren't going to modify the code to make that possible
  ;; ie. removing mars tomb skip if you pick "all missions"
  ;; Random one for experimentation
  (all-cheats-allowed 999)
  (custom 9999))

(deftype speedrun-custom-category (structure)
  ((index int32 :offset-assert 0)
   (secrets game-secrets :offset-assert 4)
   (features game-feature :offset-assert 8)
   (forbidden-features game-feature :offset-assert 16)
   (pc-cheats pc-cheats :offset-assert 24)
   (completed-task game-task :offset-assert 32)))

(deftype speedrun-info (structure)
  ((category speedrun-category)
   (active-custom-category speedrun-custom-category)
   (dump-custom-category speedrun-custom-category)
   (display-run-info? symbol)
   (practicing? symbol)
   (active-practice-objective speedrun-practice-objective)
   (waiting-to-record-practice-attempt? symbol)
   (run-started-at time-frame))
  (:methods
    (set-category! (_type_ speedrun-category) none)
    (start-run! (_type_) none)
    (start-individual-level-run! (_type_ game-task) none)
    (enforce-settings! (_type_) none)
    (update! (_type_) none)
    (draw-run-info (_type_) none)))

(define-extern *speedrun-info* speedrun-info)

(defenum speedrun-menu-command
  :type uint32
  (reset 0)
  (exit 1))

(deftype speedrun-manager (process)
  ((popup-menu (pointer popup-menu))
   (ignore-menu-toggle? symbol)
   (opened-with-start? symbol)
   (timer (pointer speedrun-timer)))
  (:methods
    (draw-menu (_type_) none))
  (:state-methods
    idle))

(define-extern *speedrun-manager* (pointer speedrun-manager))
