;;-*-Lisp-*-
(in-package goal)

;; TODO later - customize menu open keybind

(define-extern *mod-version-text* string)

(define-extern task-close! (function string symbol))
(define-extern task-resolution-closed? (function game-task symbol))

(define *speedrun-info* (new 'static 'speedrun-info))
(set! (-> *speedrun-info* active-custom-category) (new 'static 'speedrun-custom-category))
(set! (-> *speedrun-info* dump-custom-category) (new 'static 'speedrun-custom-category))
(set! (-> *speedrun-info* active-practice-objective) (new 'static 'speedrun-practice-objective))
(set! (-> *speedrun-info* active-practice-objective starting-position) (new 'static 'vector))
(set! (-> *speedrun-info* active-practice-objective starting-rotation) (new 'static 'vector))
(set! (-> *speedrun-info* active-practice-objective starting-camera-position) (new 'static 'vector))
(set! (-> *speedrun-info* active-practice-objective starting-camera-rotation) (new 'static 'matrix))
(set! (-> *speedrun-info* active-practice-objective start-zone-init-params) (new 'static 'objective-zone-init-params))
(set! (-> *speedrun-info* active-practice-objective end-zone-init-params) (new 'static 'objective-zone-init-params))

(defun print-timer-text ((s string) (x int) (y int))
  (pc-encode-utf8-string s *pc-encoded-temp-string*)
  (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
    ;; reset bucket settings prior to drawing - font won't do this for us, and
    ;; draw-raw-image can sometimes mess them up. (intro sequence)
    (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
    (let ((font-ctx (new 'stack 'font-context *font-default-matrix* x y 0.0 (font-color default) (font-flags shadow kerning large))))
      (set! (-> font-ctx scale) 0.25)
      (draw-string-adv *pc-encoded-temp-string* buf font-ctx)))
  (none)
  )

(defun get-speedrun-end-results-text ()
  (let* ((timer (the-as speedrun-timer (ppointer->process (-> *speedrun-manager* 0 timer))))
         (total-sec (the int (* (the float (- (-> timer end-time) (-> timer start-time))) 0.0033333334)))
         (min (/ total-sec 60))
         (sec (- total-sec (* min 60))))
    (clear *temp-string*)
    (clear *pc-encoded-temp-string*)
    (format *temp-string* "~4L~S~%" (-> *speedrun-category-names* (-> *speedrun-info* category)))
    (format *temp-string* "~6LMission Completed~%~%")
    (format *temp-string* "~0LMission Time: ~D:~2,'0D~%~%" min sec)
    (format *temp-string* "Enemies Killed: ~D~%" (get-jak-enemy-kill-count (-> *statistics* kill-stats)))
    (format *temp-string* "Civilians Killed: ~D~%~%" (get-jak-friendly-kill-count (-> *statistics* kill-stats)))
    ;; (format *temp-string* "Press START to continue~%")
    (pc-encode-utf8-string *temp-string* *pc-encoded-temp-string*)
    ;; return
    *pc-encoded-temp-string*
    )
  )

(define-extern play-music-player-track (function int none))
(define-extern music-player-track-cur-idx (function int))
(defmethod draw-timer ((this speedrun-timer))
  ;; (format 0 "draw-timer ~D~%" (get-current-time))
  (clear *temp-string*)
  (clear *pc-encoded-temp-string*)
  (cond
   ((-> this started?)
    (format *temp-string* "~,,2fs~%" (* (the float (- (get-real-current-time) (-> this start-time))) 0.0033333334))
    ;; show speed in practice mode
    (when (and *target* (-> *speedrun-info* practicing?))
      (format *temp-string* "~,,2M~%" (-> *target* control ctrl-xz-vel)))
    
    (print-timer-text *temp-string* 2 406)
    )
   ((and (!= 0 (-> this end-time)))
    (suspend-for (seconds 1))
    (let ((cur-music (music-player-track-cur-idx)))
      (activate-progress *dproc* 'speedrun-end-results)
      (play-music-player-track 15)
      (print-stats (-> *statistics* kill-stats) #t)
      (until (progress-allowed?)
        (suspend))
      ;; stop race music, maybe resume old music
      (remove-setting! 'music)
      (apply-settings *setting-control*)
      (sound-group-pause (sound-group music))
      (when (>= cur-music 0)
        (play-music-player-track cur-music))
      (set! (-> this end-time) 0)
      )
    )
   (else
    (format *temp-string* "0.0s~%")
    (print-timer-text *temp-string* 2 406)
    )
  )


  (none))

(defmethod start! ((this speedrun-timer))
  (set! (-> this started?) #t)
  (set! (-> this stopped?) #f)
  (set! (-> this start-time) (get-real-current-time))
  (set! (-> this end-time) 0)
  (none))

(defmethod reset! ((this speedrun-timer))
  (set! (-> this started?) #f)
  (set! (-> this stopped?) #f)
  (set! (-> this start-time) 0)
  (set! (-> this end-time) 0)
  (none))

(defmethod stop! ((this speedrun-timer))
  (when (not (-> this stopped?))
    (set! (-> this started?) #f)
    (set! (-> this stopped?) #t)
    (set! (-> this end-time) (get-real-current-time))
    (set! (-> this recorded-time) (* (the float (- (-> this end-time) (-> this start-time))) 0.0033333334)))
  (-> this recorded-time))

(defmethod set-category! ((this speedrun-info) (category speedrun-category))
  (set! (-> this category) category)
  (none))

(defmethod start-individual-level-run! ((this speedrun-info) (tsk game-task))
  (set! (-> this active-practice-objective end-task) tsk)
  (start 'play (get-continue-by-name *game-info* (play-task tsk 'debug 'play)))
  (set-master-mode 'game)
  ;; spawn a process that suspends until jak is properly spawned, before starting timer
  (process-spawn-function process (lambda :behavior process ()
    (let ((target-continued? #f))
      (until (and target-continued?
                  (< (-> *game-info* blackout-time) (get-current-time)) 
                  (= (-> *setting-control* user-default bg-a-force) 0.0))
        ;; (if *target* (format 0 "target is in state ~A~%" (-> *target* next-state name)))
        (suspend)
        (when (and *target* (!= (-> *target* next-state name) 'target-continue))
          (true! target-continued?)))
      )
    (start! (the-as speedrun-timer (ppointer->process (-> *speedrun-manager* 0 timer))))))
  (none)
  )

(define-extern reset-kill-stats (function none))
(defmethod start-run! ((this speedrun-info))
  ;; randomize game id so the autosplitter knows to restart
  (reset! *autosplit-info-jak2*)
  (reset-kill-stats)
  ;; turn on speedrun verification display
  (set! (-> this display-run-info?) #t)
  (send-event (ppointer->process *speedrun-manager*) 'start-run)
  ;; ensure any required settings are enabled
  (enforce-settings! this)
  ;; reset end-task 
  (set! (-> this active-practice-objective end-task) (game-task none))
  ;; finalize any category specific setup code
  (case (-> this category)
    (((speedrun-category newgame-normal))
      (initialize! *game-info* 'game (the-as game-save #f) "game-start"))
    (((speedrun-category newgame-heromode))
      (initialize! *game-info* 'game (the-as game-save #f) "game-start-hero"))
    (((speedrun-category all-cheats-allowed))
      (initialize! *game-info* 'game (the-as game-save #f) "game-start"))
    ;; Act 1 ILs
    (((speedrun-category fortress-escape))
      (start-individual-level-run! this (game-task fortress-escape)))
    (((speedrun-category city-help-kid))
      (start-individual-level-run! this (game-task city-help-kid)))
    (((speedrun-category ruins-tower))
      (start-individual-level-run! this (game-task ruins-tower)))
    (((speedrun-category atoll-water))
      (start-individual-level-run! this (game-task atoll-water)))
    (((speedrun-category fortress-dump))
      (start-individual-level-run! this (game-task fortress-dump)))
    (((speedrun-category city-krew-delivery))
      (start-individual-level-run! this (game-task city-krew-delivery)))
    (((speedrun-category city-red-gun-training))
      (start-individual-level-run! this (game-task city-red-gun-training)))
    (((speedrun-category atoll-sig))
      (start-individual-level-run! this (game-task atoll-sig)))
    (((speedrun-category sewer-enemy))
      (start-individual-level-run! this (game-task sewer-enemy)))
    (((speedrun-category strip-rescue))
      (start-individual-level-run! this (game-task strip-rescue)))
    (((speedrun-category atoll-battle))
      (start-individual-level-run! this (game-task atoll-battle)))
    (((speedrun-category mountain-lens))
      (start-individual-level-run! this (game-task mountain-lens)))
    (((speedrun-category mountain-gear))
      (start-individual-level-run! this (game-task mountain-gear)))
    (((speedrun-category mountain-shard))
      (start-individual-level-run! this (game-task mountain-shard)))
    (((speedrun-category city-keira-delivery))
      (start-individual-level-run! this (game-task city-keira-delivery)))
    (((speedrun-category stadium-board1))
      (start-individual-level-run! this (game-task stadium-board1)))
    (((speedrun-category city-krew-collection))
      (start-individual-level-run! this (game-task city-krew-collection)))
    (((speedrun-category city-yellow-gun-training))
      (start-individual-level-run! this (game-task city-yellow-gun-training)))
    (((speedrun-category drill-eggs))
      (start-individual-level-run! this (game-task drill-eggs)))
    (((speedrun-category city-power))
      (start-individual-level-run! this (game-task city-power)))
    (((speedrun-category palace-cable))
      (start-individual-level-run! this (game-task palace-cable)))
    (((speedrun-category palace-boss))
      (start-individual-level-run! this (game-task palace-boss)))
    (((speedrun-category city-shuttle))
      (start-individual-level-run! this (game-task city-shuttle)))
    (((speedrun-category ruins-enemy))
      (start-individual-level-run! this (game-task ruins-enemy)))
    ;; Act 2 ILs
    (((speedrun-category forest-scouts))
      (start-individual-level-run! this (game-task forest-scouts)))
    (((speedrun-category city-escort-kid))
      (start-individual-level-run! this (game-task city-escort-kid)))
    (((speedrun-category dig-knock-down))
      (start-individual-level-run! this (game-task dig-knock-down)))
    (((speedrun-category strip-grenade))
      (start-individual-level-run! this (game-task strip-grenade)))
    (((speedrun-category drill-ship))
      (start-individual-level-run! this (game-task drill-ship)))
    (((speedrun-category city-port-run))
      (start-individual-level-run! this (game-task city-port-run)))
    (((speedrun-category city-meet-brutter))
      (start-individual-level-run! this (game-task city-meet-brutter)))
    (((speedrun-category sewer-board))
      (start-individual-level-run! this (game-task sewer-board)))
    (((speedrun-category forest-hunt))
      (start-individual-level-run! this (game-task forest-hunt)))
    (((speedrun-category city-intercept-tanker))
      (start-individual-level-run! this (game-task city-intercept-tanker)))
    (((speedrun-category stadium-race-class3))
      (start-individual-level-run! this (game-task stadium-race-class3)))
    (((speedrun-category city-protect-water-slums))
      (start-individual-level-run! this (game-task city-protect-water-slums)))
    (((speedrun-category dig-find-totem))
      (start-individual-level-run! this (game-task dig-find-totem)))
    (((speedrun-category city-destroy-guard-vehicles))
      (start-individual-level-run! this (game-task city-destroy-guard-vehicles)))
    (((speedrun-category city-play-onin-game))
      (start-individual-level-run! this (game-task city-play-onin-game)))
    (((speedrun-category canyon-insert-items))
      (start-individual-level-run! this (game-task canyon-insert-items)))
    (((speedrun-category tomb-poles))
      (start-individual-level-run! this (game-task tomb-poles)))
    (((speedrun-category tomb-water))
      (start-individual-level-run! this (game-task tomb-water)))
    (((speedrun-category tomb-boss))
      (start-individual-level-run! this (game-task tomb-boss)))
    ;; Act 3 ILs
    (((speedrun-category fortress-save-friends))
      (start-individual-level-run! this (game-task fortress-save-friends)))
    (((speedrun-category sewer-escort))
      (start-individual-level-run! this (game-task sewer-escort)))
    (((speedrun-category stadium-race-class2))
      (start-individual-level-run! this (game-task stadium-race-class2)))
    (((speedrun-category city-stop-bomb-bots))
      (start-individual-level-run! this (game-task city-stop-bomb-bots)))
    (((speedrun-category city-errol-challenge))
      (start-individual-level-run! this (game-task city-errol-challenge)))
    (((speedrun-category strip-drop))
      (start-individual-level-run! this (game-task strip-drop)))
    (((speedrun-category ruins-mech))
      (start-individual-level-run! this (game-task ruins-mech)))
    (((speedrun-category forest-protect))
      (start-individual-level-run! this (game-task forest-protect)))
    (((speedrun-category drill-mech))
      (start-individual-level-run! this (game-task drill-mech)))
    (((speedrun-category city-save-lurkers))
      (start-individual-level-run! this (game-task city-save-lurkers)))
    (((speedrun-category stadium-race-class))
      (start-individual-level-run! this (game-task stadium-race-class)))
    (((speedrun-category palace-sneak-in))
      (start-individual-level-run! this (game-task palace-sneak-in)))
    (((speedrun-category castle-break-in))
      (start-individual-level-run! this (game-task castle-break-in)))
    (((speedrun-category castle-boss))
      (start-individual-level-run! this (game-task castle-boss)))
    (((speedrun-category city-whack))
      (start-individual-level-run! this (game-task city-whack)))
    (((speedrun-category under-mech))
      (start-individual-level-run! this (game-task under-mech)))
    (((speedrun-category under-sig))
      (start-individual-level-run! this (game-task under-sig)))
    (((speedrun-category city-defend-stadium))
      (start-individual-level-run! this (game-task city-defend-stadium)))
    (((speedrun-category consite-find-baron))
      (start-individual-level-run! this (game-task consite-find-baron)))
    (((speedrun-category nest-get-to-gun))
      (start-individual-level-run! this (game-task nest-get-to-gun)))
    (((speedrun-category nest-enter))
      (start-individual-level-run! this (game-task nest-enter)))
    (((speedrun-category nest-boss))
      (start-individual-level-run! this (game-task nest-boss)))
    (((speedrun-category custom))
      (set-master-mode 'game)
      (send-event (ppointer->process (-> *speedrun-manager* 0 popup-menu)) 'close-menu)
      (process-spawn-function process (lambda :behavior process ()
        (clear *temp-string*)
        (pc-sr-mode-get-custom-category-continue-point (-> *speedrun-info* active-custom-category index) *temp-string*)
        (if (string= *temp-string* "")
          (initialize! *game-info* 'game (the-as game-save #f) "game-start")
          (initialize! *game-info* 'game (the-as game-save #f) *temp-string*))
        (until (and *target* (= (-> *target* next-state name) 'target-stance))
          (suspend))
        (when (nonzero? (-> *speedrun-info* active-custom-category completed-task))
          (task-resolution-close! (-> *speedrun-info* active-custom-category completed-task)))))))
  (if (!= -1 (-> *game-info* auto-save-which))
      (set! (-> *setting-control* user-default auto-save) #t))

  (none))

(defmethod enforce-settings! ((this speedrun-info))
  (set! (-> *pc-settings* ps2-actor-vis?) #t) ;; force PS2 actor visibility
  (set-frame-rate! *pc-settings* 60 #t) ;; force FPS to `60`
  ;; For posterity, the main reason why changing the cheats is useful is for two main reasons:
  ;; - If you are playing a category that requires cheats (ie. a turbo jetboard one) you'd
  ;;   probably like the game to automatically set the appropriate ones for you
  ;; - If you are playing a category that forbids cheats, you wouldn't want your run invalidated because you forgot
  (case (-> this category)
    (((speedrun-category newgame-normal) (speedrun-category newgame-heromode))
      ;; disable any active cheats
      (set! (-> *pc-settings* cheats) (the-as pc-cheats #x0)))
    (((speedrun-category custom))
      (set! (-> *game-info* secrets) (-> *speedrun-info* active-custom-category secrets))
      (logior! (-> *game-info* features) (-> *speedrun-info* active-custom-category features))
      (logclear! (-> *game-info* features) (-> *speedrun-info* active-custom-category forbidden-features))
      (set! (-> *pc-settings* cheats) (-> *speedrun-info* active-custom-category pc-cheats))))
  (none))

(defmethod draw-zone ((this objective-zone))
  (add-debug-box
    #t
    (bucket-id debug2)
    (-> this v1)
    (-> this v2)
    (if (-> this start?)
        (new 'static 'rgba :r #xff :g #xff :b #x00 :a #x80)
        (new 'static 'rgba :r #xff :g #x00 :b #xff :a #x80)))
  (none))

(defstate waiting-for-player (objective-zone)
  :virtual #t
  :event (behavior ((proc process) (arg1 int) (event-type symbol) (event event-message-block))
    (the-as object 0))
  :trans (behavior ()
    ;; Check to see if we have entered the zone
    (let ((min-point-x (fmin (-> self v1 x) (-> self v2 x)))
          (min-point-y (fmin (-> self v1 y) (-> self v2 y)))
          (min-point-z (fmin (-> self v1 z) (-> self v2 z)))
          (max-point-x (fmax (-> self v1 x) (-> self v2 x)))
          (max-point-y (fmax (-> self v1 y) (-> self v2 y)))
          (max-point-z (fmax (-> self v1 z) (-> self v2 z)))
          (pos (target-pos 0)))
      (when (and (and (<= min-point-x (-> pos x))
                      (<= (-> pos x) max-point-x))
                 (and (<= min-point-y (-> pos y))
                      (<= (-> pos y) max-point-y))
                 (and (<= min-point-z (-> pos z))
                      (<= (-> pos z) max-point-z)))
        (when (nonzero? (-> self on-enter))
          ((-> self on-enter)))
        (go-virtual player-inside)))
    (none))
  :code (behavior ()
    (until #f
      (draw-zone self)
      (suspend))
    (none))
  :post (behavior ()
    (none)))

(defstate player-inside (objective-zone)
  :virtual #t
  :trans (behavior ()
    ;; Check to see if we have entered the zone
    (let ((min-point-x (fmin (-> self v1 x) (-> self v2 x)))
          (min-point-y (fmin (-> self v1 y) (-> self v2 y)))
          (min-point-z (fmin (-> self v1 z) (-> self v2 z)))
          (max-point-x (fmax (-> self v1 x) (-> self v2 x)))
          (max-point-y (fmax (-> self v1 y) (-> self v2 y)))
          (max-point-z (fmax (-> self v1 z) (-> self v2 z)))
          (pos (target-pos 0)))
      (when (not (and (and (<= min-point-x (-> pos x))
                           (<= (-> pos x) max-point-x))
                      (and (<= min-point-y (-> pos y))
                           (<= (-> pos y) max-point-y))
                      (and (<= min-point-z (-> pos z))
                           (<= (-> pos z) max-point-z))))
        (when (nonzero? (-> self on-exit))
          ((-> self on-exit)))
        (go-virtual waiting-for-player)))
    (none))
  :code (behavior ()
    (until #f
      (draw-zone self)
      (suspend))
    (none)))

(defbehavior objective-zone-init objective-zone ((start? symbol) (params objective-zone-init-params))
  (set! (-> self start?) start?)
  (set! (-> self v1 quad) (-> params v1 quad))
  (set! (-> self v2 quad) (-> params v2 quad))
  (go-virtual waiting-for-player)
  (none))

(defmethod draw-info ((this speedrun-practice-objective))
  (clear *temp-string*)
  (clear *pc-encoded-temp-string*)
  (pc-sr-mode-get-practice-entry-name (-> this index) *pc-encoded-temp-string*)
  (format *temp-string* "<COLOR_WHITE>Practicing: <COLOR_GREEN>~S~%" *pc-encoded-temp-string*)
  (if (> (pc-sr-mode-get-practice-entry-history-attempts (-> this index)) 0)
    (format *temp-string* "<COLOR_WHITE>History: <COLOR_GREEN>~D<COLOR_WHITE>/~D (~,,2f%)~%"
                          (pc-sr-mode-get-practice-entry-history-success (-> this index))
                          (pc-sr-mode-get-practice-entry-history-attempts (-> this index))
                          (* 100.0 (/ (the float (pc-sr-mode-get-practice-entry-history-success (-> this index)))
                                      (the float (pc-sr-mode-get-practice-entry-history-attempts (-> this index))))))
    (format *temp-string* "<COLOR_WHITE>History: --~%"))
  (if (> (pc-sr-mode-get-practice-entry-session-attempts (-> this index)) 0)
    (format *temp-string* "<COLOR_WHITE>Session: <COLOR_GREEN>~D<COLOR_WHITE>/~D (~,,2f%)~%"
                          (pc-sr-mode-get-practice-entry-session-success (-> this index))
                          (pc-sr-mode-get-practice-entry-session-attempts (-> this index))
                          (* 100.0 (/ (the float (pc-sr-mode-get-practice-entry-session-success (-> this index)))
                                      (the float (pc-sr-mode-get-practice-entry-session-attempts (-> this index))))))
    (format *temp-string* "<COLOR_WHITE>Session: --~%"))
  (pc-sr-mode-get-practice-entry-avg-time (-> this index) *pc-encoded-temp-string*)
  (format *temp-string* "<COLOR_WHITE>Average Time: <COLOR_GREEN>~Ss~%" *pc-encoded-temp-string*)
  (pc-sr-mode-get-practice-entry-fastest-time (-> this index) *pc-encoded-temp-string*)
  (format *temp-string* "<COLOR_WHITE>Fastest Time: <COLOR_GREEN>~Ss~%" *pc-encoded-temp-string*)
  (format *temp-string* "<COLOR_WHITE>\c91 L3: Reset~%")
  (pc-encode-utf8-string *temp-string* *pc-encoded-temp-string*)
  (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf2))
    ;; reset bucket settings prior to drawing - font won't do this for us, and
    ;; draw-raw-image can sometimes mess them up. (intro sequence)
    (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
    (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 20 0.0 (font-color default) (font-flags right shadow kerning large))))
      (set! (-> font-ctx scale) 0.325)
      (draw-string-adv *pc-encoded-temp-string* buf font-ctx)))
  (none))

(defmethod reset! ((this speedrun-practice-objective))
  ;; record attempt if attempt was started
  (when (-> *speedrun-info* waiting-to-record-practice-attempt?)
    (pc-sr-mode-record-practice-entry-attempt! (-> this index) #f (&-> (the-as speedrun-timer (ppointer->process (-> *speedrun-manager* 0 timer))) recorded-time)))
  ;; TODO - load checkpoint if not already in that checkpoint
  ;; TODO - set features / cheats / completed-task / etc
  ;; Update player position
  (vector-copy! (-> *target* root trans) (-> this starting-position))
  (vector-copy! (-> *target* root quat) (-> this starting-rotation))
  ;; - get off jetboard and reset speed
  (vector-copy! (-> *target* control transv) *zero-vector*)
  (send-event *target* 'change-mode 'normal)
  ;; Update camera position and rotation
  (vector-copy! (-> *camera-combiner* trans) (-> this starting-camera-position))
  (matrix-identity! (-> *camera-combiner* inv-camera-rot))
  (matrix-copy! (-> *camera-combiner* inv-camera-rot) (-> this starting-camera-rotation))
  (process-spawn-function process
    (lambda :behavior process ()
      (suspend)
      (send-event *camera* 'teleport)
      (deactivate self)))
  (cam-master-activate-slave #f)
  (none))

(define *speedrun-popup-menu-entries*
  (new 'static 'boxed-array :type popup-menu-entry
      (new 'static 'popup-menu-button :label "Reset"
        :on-confirm (lambda () (send-event (ppointer->process *speedrun-manager*) 'invoke (speedrun-menu-command reset))))
      (new 'static 'popup-menu-submenu :label "Built-in category select"
        :entries (new 'static 'boxed-array :type popup-menu-entry
          (new 'static 'popup-menu-flag :label "Normal"
            :on-confirm (lambda () (set-category! *speedrun-info* (speedrun-category newgame-normal)))
            :is-toggled? (lambda () (= (-> *speedrun-info* category) (speedrun-category newgame-normal))))
          (new 'static 'popup-menu-flag :label "Hero mode"
            :on-confirm (lambda () (set-category! *speedrun-info* (speedrun-category newgame-heromode)))
            :is-toggled? (lambda () (= (-> *speedrun-info* category) (speedrun-category newgame-heromode))))
          (new 'static 'popup-menu-flag :label "All cheats allowed"
            :on-confirm (lambda () (set-category! *speedrun-info* (speedrun-category all-cheats-allowed)))
            :is-toggled? (lambda () (= (-> *speedrun-info* category) (speedrun-category all-cheats-allowed))))
          (new 'static 'popup-menu-submenu :label "Act 1 Individual Levels"
            :entries (new 'static 'boxed-array :type popup-menu-entry
              (new 'static 'popup-menu-flag :label "Escape from Fortress"
                  :on-confirm (lambda () (set-category! *speedrun-info* (speedrun-category fortress-escape)))
                  :is-toggled? (lambda () (= (-> *speedrun-info* category) (speedrun-category fortress-escape))))
              (new 'static 'popup-menu-flag :label "Protect Kor and Kid"
                  :on-confirm (lambda () (set-category! *speedrun-info* (speedrun-category city-help-kid)))
                  :is-toggled? (lambda () (= (-> *speedrun-info* category) (speedrun-category city-help-kid))))
              (new 'static 'popup-menu-flag :label "Retrieve Banner from Dead Town"
                  :on-confirm (lambda () (set-category! *speedrun-info* (speedrun-category ruins-tower)))
                  :is-toggled? (lambda () (= (-> *speedrun-info* category) (speedrun-category ruins-tower))))
              (new 'static 'popup-menu-flag :label "Find Pumping Station Valve"
                  :on-confirm (lambda () (set-category! *speedrun-info* (speedrun-category atoll-water)))
                  :is-toggled? (lambda () (= (-> *speedrun-info* category) (speedrun-category atoll-water))))
              (new 'static 'popup-menu-flag :label "Blow up Ammo at Fortress"
                  :on-confirm (lambda () (set-category! *speedrun-info* (speedrun-category fortress-dump)))
                  :is-toggled? (lambda () (= (-> *speedrun-info* category) (speedrun-category fortress-dump))))
              (new 'static 'popup-menu-flag :label "Make delivery to Hip Hog Saloon"
                  :on-confirm (lambda () (set-category! *speedrun-info* (speedrun-category city-krew-delivery)))
                  :is-toggled? (lambda () (= (-> *speedrun-info* category) (speedrun-category city-krew-delivery))))
              (new 'static 'popup-menu-flag :label "Beat Scatter Gun Course"
                  :on-confirm (lambda () (set-category! *speedrun-info* (speedrun-category city-red-gun-training)))
                  :is-toggled? (lambda () (= (-> *speedrun-info* category) (speedrun-category city-red-gun-training))))
              (new 'static 'popup-menu-flag :label "Protect Sig at Pumping Station"
                  :on-confirm (lambda () (set-category! *speedrun-info* (speedrun-category atoll-sig)))
                  :is-toggled? (lambda () (= (-> *speedrun-info* category) (speedrun-category atoll-sig))))
              (new 'static 'popup-menu-flag :label "Destroy Turrets in Sewers"
                  :on-confirm (lambda () (set-category! *speedrun-info* (speedrun-category sewer-enemy)))
                  :is-toggled? (lambda () (= (-> *speedrun-info* category) (speedrun-category sewer-enemy))))
              (new 'static 'popup-menu-flag :label "Rescue Vin at Strip Mine"
                  :on-confirm (lambda () (set-category! *speedrun-info* (speedrun-category strip-rescue)))
                  :is-toggled? (lambda () (= (-> *speedrun-info* category) (speedrun-category strip-rescue))))
              (new 'static 'popup-menu-flag :label "Find Pumping Station Patrol"
                  :on-confirm (lambda () (set-category! *speedrun-info* (speedrun-category atoll-battle)))
                  :is-toggled? (lambda () (= (-> *speedrun-info* category) (speedrun-category atoll-battle))))
              (new 'static 'popup-menu-flag :label "Find Lens in Mountain Temple"
                  :on-confirm (lambda () (set-category! *speedrun-info* (speedrun-category mountain-lens)))
                  :is-toggled? (lambda () (= (-> *speedrun-info* category) (speedrun-category mountain-lens))))
              (new 'static 'popup-menu-flag :label "Find Gear in Mountain Temple"
                  :on-confirm (lambda () (set-category! *speedrun-info* (speedrun-category mountain-gear)))
                  :is-toggled? (lambda () (= (-> *speedrun-info* category) (speedrun-category mountain-gear))))
              (new 'static 'popup-menu-flag :label "Find Shard in Mountain Temple"
                  :on-confirm (lambda () (set-category! *speedrun-info* (speedrun-category mountain-shard)))
                  :is-toggled? (lambda () (= (-> *speedrun-info* category) (speedrun-category mountain-shard))))
              (new 'static 'popup-menu-flag :label "Beat Time to Race Garage"
                  :on-confirm (lambda () (set-category! *speedrun-info* (speedrun-category city-keira-delivery)))
                  :is-toggled? (lambda () (= (-> *speedrun-info* category) (speedrun-category city-keira-delivery))))
              (new 'static 'popup-menu-flag :label "Win JET-Board Stadium Challenge"
                  :on-confirm (lambda () (set-category! *speedrun-info* (speedrun-category stadium-board1)))
                  :is-toggled? (lambda () (= (-> *speedrun-info* category) (speedrun-category stadium-board1))))
              (new 'static 'popup-menu-flag :label "Collect Money for Krew"
                  :on-confirm (lambda () (set-category! *speedrun-info* (speedrun-category city-krew-collection)))
                  :is-toggled? (lambda () (= (-> *speedrun-info* category) (speedrun-category city-krew-collection))))
              (new 'static 'popup-menu-flag :label "Beat Blaster Gun Course"
                  :on-confirm (lambda () (set-category! *speedrun-info* (speedrun-category city-yellow-gun-training)))
                  :is-toggled? (lambda () (= (-> *speedrun-info* category) (speedrun-category city-yellow-gun-training))))
              (new 'static 'popup-menu-flag :label "Destroy Eggs at Drill Platform"
                  :on-confirm (lambda () (set-category! *speedrun-info* (speedrun-category drill-eggs)))
                  :is-toggled? (lambda () (= (-> *speedrun-info* category) (speedrun-category drill-eggs))))
              (new 'static 'popup-menu-flag :label "Turn on 5 Power Switches"
                  :on-confirm (lambda () (set-category! *speedrun-info* (speedrun-category city-power)))
                  :is-toggled? (lambda () (= (-> *speedrun-info* category) (speedrun-category city-power))))
              (new 'static 'popup-menu-flag :label "Ride Elevator up to Palace"
                  :on-confirm (lambda () (set-category! *speedrun-info* (speedrun-category palace-cable)))
                  :is-toggled? (lambda () (= (-> *speedrun-info* category) (speedrun-category palace-cable))))
              (new 'static 'popup-menu-flag :label "Defeat Baron at Palace"
                  :on-confirm (lambda () (set-category! *speedrun-info* (speedrun-category palace-boss)))
                  :is-toggled? (lambda () (= (-> *speedrun-info* category) (speedrun-category palace-boss))))
              (new 'static 'popup-menu-flag :label "Shuttle Underground Fighters"
                  :on-confirm (lambda () (set-category! *speedrun-info* (speedrun-category city-shuttle)))
                  :is-toggled? (lambda () (= (-> *speedrun-info* category) (speedrun-category city-shuttle))))
              (new 'static 'popup-menu-flag :label "Protect Site in Dead Town"
                  :on-confirm (lambda () (set-category! *speedrun-info* (speedrun-category ruins-enemy)))
                  :is-toggled? (lambda () (= (-> *speedrun-info* category) (speedrun-category ruins-enemy))))
              )
            )
          (new 'static 'popup-menu-submenu :label "Act 2 Individual Levels"
            :entries (new 'static 'boxed-array :type popup-menu-entry
              (new 'static 'popup-menu-flag :label "Catch Scouts in Haven Forest"
                :on-confirm (lambda () (set-category! *speedrun-info* (speedrun-category forest-scouts)))
                :is-toggled? (lambda () (= (-> *speedrun-info* category) (speedrun-category forest-scouts))))
              (new 'static 'popup-menu-flag :label "Escort Kid to Power Station"
                :on-confirm (lambda () (set-category! *speedrun-info* (speedrun-category city-escort-kid)))
                :is-toggled? (lambda () (= (-> *speedrun-info* category) (speedrun-category city-escort-kid))))
              (new 'static 'popup-menu-flag :label "Destroy Equipment at Dig"
                :on-confirm (lambda () (set-category! *speedrun-info* (speedrun-category dig-knock-down)))
                :is-toggled? (lambda () (= (-> *speedrun-info* category) (speedrun-category dig-knock-down))))
              (new 'static 'popup-menu-flag :label "Blow up Strip Mine Eco Wells"
                :on-confirm (lambda () (set-category! *speedrun-info* (speedrun-category strip-grenade)))
                :is-toggled? (lambda () (= (-> *speedrun-info* category) (speedrun-category strip-grenade))))
              (new 'static 'popup-menu-flag :label "Destroy Ship at Drill Platform"
                :on-confirm (lambda () (set-category! *speedrun-info* (speedrun-category drill-ship)))
                :is-toggled? (lambda () (= (-> *speedrun-info* category) (speedrun-category drill-ship))))
              (new 'static 'popup-menu-flag :label "Destroy Cargo in Port"
                :on-confirm (lambda () (set-category! *speedrun-info* (speedrun-category city-port-run)))
                :is-toggled? (lambda () (= (-> *speedrun-info* category) (speedrun-category city-port-run))))
              (new 'static 'popup-menu-flag :label "Rescue Lurkers for Brutter"
                :on-confirm (lambda () (set-category! *speedrun-info* (speedrun-category city-meet-brutter)))
                :is-toggled? (lambda () (= (-> *speedrun-info* category) (speedrun-category city-meet-brutter))))
              (new 'static 'popup-menu-flag :label "Drain Sewers to find Statue"
                :on-confirm (lambda () (set-category! *speedrun-info* (speedrun-category sewer-board)))
                :is-toggled? (lambda () (= (-> *speedrun-info* category) (speedrun-category sewer-board))))
              (new 'static 'popup-menu-flag :label "Hunt Haven Forest Metal Heads"
                :on-confirm (lambda () (set-category! *speedrun-info* (speedrun-category forest-hunt)))
                :is-toggled? (lambda () (= (-> *speedrun-info* category) (speedrun-category forest-hunt))))
              (new 'static 'popup-menu-flag :label "Intercept Tanker"
                :on-confirm (lambda () (set-category! *speedrun-info* (speedrun-category city-intercept-tanker)))
                :is-toggled? (lambda () (= (-> *speedrun-info* category) (speedrun-category city-intercept-tanker))))
              (new 'static 'popup-menu-flag :label "Win Class 3 Race at Stadium"
                :on-confirm (lambda () (set-category! *speedrun-info* (speedrun-category stadium-race-class3)))
                :is-toggled? (lambda () (= (-> *speedrun-info* category) (speedrun-category stadium-race-class3))))
              (new 'static 'popup-menu-flag :label "Get Seal Piece at Water Slums"
                :on-confirm (lambda () (set-category! *speedrun-info* (speedrun-category city-protect-water-slums)))
                :is-toggled? (lambda () (= (-> *speedrun-info* category) (speedrun-category city-protect-water-slums))))
              (new 'static 'popup-menu-flag :label "Get Seal Piece at Dig"
                :on-confirm (lambda () (set-category! *speedrun-info* (speedrun-category dig-find-totem)))
                :is-toggled? (lambda () (= (-> *speedrun-info* category) (speedrun-category dig-find-totem))))
              (new 'static 'popup-menu-flag :label "Destroy 5 HellCat Cruisers"
                :on-confirm (lambda () (set-category! *speedrun-info* (speedrun-category city-destroy-guard-vehicles)))
                :is-toggled? (lambda () (= (-> *speedrun-info* category) (speedrun-category city-destroy-guard-vehicles))))
              (new 'static 'popup-menu-flag :label "Beat Onin Game"
                :on-confirm (lambda () (set-category! *speedrun-info* (speedrun-category city-play-onin-game)))
                :is-toggled? (lambda () (= (-> *speedrun-info* category) (speedrun-category city-play-onin-game))))
              (new 'static 'popup-menu-flag :label "Use items in No Man's Canyon"
                :on-confirm (lambda () (set-category! *speedrun-info* (speedrun-category canyon-insert-items)))
                :is-toggled? (lambda () (= (-> *speedrun-info* category) (speedrun-category canyon-insert-items))))
              (new 'static 'popup-menu-flag :label "Pass the first Test of Manhood"
                :on-confirm (lambda () (set-category! *speedrun-info* (speedrun-category tomb-poles)))
                :is-toggled? (lambda () (= (-> *speedrun-info* category) (speedrun-category tomb-poles))))
              (new 'static 'popup-menu-flag :label "Pass the second Test of Manhood"
                :on-confirm (lambda () (set-category! *speedrun-info* (speedrun-category tomb-water)))
                :is-toggled? (lambda () (= (-> *speedrun-info* category) (speedrun-category tomb-water))))
              (new 'static 'popup-menu-flag :label "Defeat Baron in Mar's Tomb"
                :on-confirm (lambda () (set-category! *speedrun-info* (speedrun-category tomb-boss)))
                :is-toggled? (lambda () (= (-> *speedrun-info* category) (speedrun-category tomb-boss))))
              )
            )
          (new 'static 'popup-menu-submenu :label "Act 3 Individual Levels"
            :entries (new 'static 'boxed-array :type popup-menu-entry
              (new 'static 'popup-menu-flag :label "Rescue Friends in Fortress"
                :on-confirm (lambda () (set-category! *speedrun-info* (speedrun-category fortress-save-friends)))
                :is-toggled? (lambda () (= (-> *speedrun-info* category) (speedrun-category fortress-save-friends))))
              (new 'static 'popup-menu-flag :label "Escort men through Sewers"
                :on-confirm (lambda () (set-category! *speedrun-info* (speedrun-category sewer-escort)))
                :is-toggled? (lambda () (= (-> *speedrun-info* category) (speedrun-category sewer-escort))))
              (new 'static 'popup-menu-flag :label "Win Class 2 Race at Stadium"
                :on-confirm (lambda () (set-category! *speedrun-info* (speedrun-category stadium-race-class2)))
                :is-toggled? (lambda () (= (-> *speedrun-info* category) (speedrun-category stadium-race-class2))))
              (new 'static 'popup-menu-flag :label "Protect Hideout from Bombots"
                :on-confirm (lambda () (set-category! *speedrun-info* (speedrun-category city-stop-bomb-bots)))
                :is-toggled? (lambda () (= (-> *speedrun-info* category) (speedrun-category city-stop-bomb-bots))))
              (new 'static 'popup-menu-flag :label "Beat Erol in Race Challenge"
                :on-confirm (lambda () (set-category! *speedrun-info* (speedrun-category city-errol-challenge)))
                :is-toggled? (lambda () (= (-> *speedrun-info* category) (speedrun-category city-errol-challenge))))
              (new 'static 'popup-menu-flag :label "Destroy Eggs in Strip Mine"
                :on-confirm (lambda () (set-category! *speedrun-info* (speedrun-category strip-drop)))
                :is-toggled? (lambda () (= (-> *speedrun-info* category) (speedrun-category strip-drop))))
              (new 'static 'popup-menu-flag :label "Get Life Seed in Dead Town"
                :on-confirm (lambda () (set-category! *speedrun-info* (speedrun-category ruins-mech)))
                :is-toggled? (lambda () (= (-> *speedrun-info* category) (speedrun-category ruins-mech))))
              (new 'static 'popup-menu-flag :label "Protect Samos in Haven Forest"
                :on-confirm (lambda () (set-category! *speedrun-info* (speedrun-category forest-protect)))
                :is-toggled? (lambda () (= (-> *speedrun-info* category) (speedrun-category forest-protect))))
              (new 'static 'popup-menu-flag :label "Destroy Drill Platform Tower"
                :on-confirm (lambda () (set-category! *speedrun-info* (speedrun-category drill-mech)))
                :is-toggled? (lambda () (= (-> *speedrun-info* category) (speedrun-category drill-mech))))
              (new 'static 'popup-menu-flag :label "Rescue Lurkers for Brutter"
                :on-confirm (lambda () (set-category! *speedrun-info* (speedrun-category city-save-lurkers)))
                :is-toggled? (lambda () (= (-> *speedrun-info* category) (speedrun-category city-save-lurkers))))
              (new 'static 'popup-menu-flag :label "Win Class 1 Race in Stadium"
                :on-confirm (lambda () (set-category! *speedrun-info* (speedrun-category stadium-race-class)))
                :is-toggled? (lambda () (= (-> *speedrun-info* category) (speedrun-category stadium-race-class))))
              (new 'static 'popup-menu-flag :label "Explore Palace"
                :on-confirm (lambda () (set-category! *speedrun-info* (speedrun-category palace-sneak-in)))
                :is-toggled? (lambda () (= (-> *speedrun-info* category) (speedrun-category palace-sneak-in))))
              (new 'static 'popup-menu-flag :label "Get Heart of Mar in Weapons Lab"
                :on-confirm (lambda () (set-category! *speedrun-info* (speedrun-category castle-break-in)))
                :is-toggled? (lambda () (= (-> *speedrun-info* category) (speedrun-category castle-break-in))))
              (new 'static 'popup-menu-flag :label "Beat Krew in Weapons Lab"
                :on-confirm (lambda () (set-category! *speedrun-info* (speedrun-category castle-boss)))
                :is-toggled? (lambda () (= (-> *speedrun-info* category) (speedrun-category castle-boss))))
              (new 'static 'popup-menu-flag :label "Beat the Metal Head Mash Game"
                :on-confirm (lambda () (set-category! *speedrun-info* (speedrun-category city-whack)))
                :is-toggled? (lambda () (= (-> *speedrun-info* category) (speedrun-category city-whack))))
              (new 'static 'popup-menu-flag :label "Find Sig in Under Port"
                :on-confirm (lambda () (set-category! *speedrun-info* (speedrun-category under-mech)))
                :is-toggled? (lambda () (= (-> *speedrun-info* category) (speedrun-category under-mech))))
              (new 'static 'popup-menu-flag :label "Escort Sig in Under Port"
                :on-confirm (lambda () (set-category! *speedrun-info* (speedrun-category under-sig)))
                :is-toggled? (lambda () (= (-> *speedrun-info* category) (speedrun-category under-sig))))
              (new 'static 'popup-menu-flag :label "Defend Stadium"
                :on-confirm (lambda () (set-category! *speedrun-info* (speedrun-category city-defend-stadium)))
                :is-toggled? (lambda () (= (-> *speedrun-info* category) (speedrun-category city-defend-stadium))))
              (new 'static 'popup-menu-flag :label "Check the Construction Site"
                :on-confirm (lambda () (set-category! *speedrun-info* (speedrun-category consite-find-baron)))
                :is-toggled? (lambda () (= (-> *speedrun-info* category) (speedrun-category consite-find-baron))))
              (new 'static 'popup-menu-flag :label "Break Barrier at Nest"
                :on-confirm (lambda () (set-category! *speedrun-info* (speedrun-category nest-get-to-gun)))
                :is-toggled? (lambda () (= (-> *speedrun-info* category) (speedrun-category nest-get-to-gun))))
              (new 'static 'popup-menu-flag :label "Attack the Metal Head Nest"
                :on-confirm (lambda () (set-category! *speedrun-info* (speedrun-category nest-enter)))
                :is-toggled? (lambda () (= (-> *speedrun-info* category) (speedrun-category nest-enter))))
              (new 'static 'popup-menu-flag :label "Destroy Metal Kor at Nest"
                :on-confirm (lambda () (set-category! *speedrun-info* (speedrun-category nest-boss)))
                :is-toggled? (lambda () (= (-> *speedrun-info* category) (speedrun-category nest-boss))))
              )
            )
          )
        )
      (new 'static 'popup-menu-dynamic-submenu :label "Custom category select"
        :get-length (lambda () (pc-sr-mode-get-custom-category-amount))
        :get-entry-label (lambda ((index int) (str-dest string)) (pc-sr-mode-get-custom-category-name index str-dest))
        :on-entry-confirm (lambda ((index int))
          ;; hydrate from cpp
          (pc-sr-mode-init-custom-category-info! index (-> *speedrun-info* active-custom-category))
          (set-category! *speedrun-info* (speedrun-category custom)))
        :entry-selected? (lambda ((index int))
          (and (= (-> *speedrun-info* category) (speedrun-category custom))
               (= index (-> *speedrun-info* active-custom-category index)))))
      ;; TODO - disabled until finalized
      ;; (new 'static 'popup-menu-dynamic-submenu :label "Practice select"
      ;;   :entry-disabled? (lambda () (not (-> *speedrun-info* practicing?)))
      ;;   :get-length (lambda () (pc-sr-mode-get-practice-entries-amount))
      ;;   :get-entry-label (lambda ((index int) (str-dest string)) (pc-sr-mode-get-practice-entry-name index str-dest))
      ;;   :on-entry-confirm (lambda ((index int))
      ;;     ;; turn on timer
      ;;     (set! (-> (the-as speedrun-timer (ppointer->process (-> *speedrun-manager* 0 timer))) draw?) #t)
      ;;     ;; tear down old processes
      ;;     (when (nonzero? (-> *speedrun-info* active-practice-objective start-zone))
      ;;       (deactivate (-> *speedrun-info* active-practice-objective start-zone 0)))
      ;;     (when (nonzero? (-> *speedrun-info* active-practice-objective end-zone))
      ;;       (deactivate (-> *speedrun-info* active-practice-objective end-zone 0)))
      ;;     ;; init from cpp
      ;;     (pc-sr-mode-init-practice-info! index (-> *speedrun-info* active-practice-objective))
      ;;     ;; startup new processes
      ;;     (set! (-> *speedrun-info* active-practice-objective start-zone)
      ;;       (the-as (pointer objective-zone) (process-spawn objective-zone :init objective-zone-init #t (-> *speedrun-info* active-practice-objective start-zone-init-params))))
      ;;     (set! (-> *speedrun-info* active-practice-objective start-zone 0 on-exit)
      ;;           (lambda ()
      ;;             (start! (the-as speedrun-timer (ppointer->process (-> *speedrun-manager* 0 timer))))
      ;;             (set! (-> *speedrun-info* waiting-to-record-practice-attempt?) #t)
      ;;             (none)))
      ;;     (set! (-> *speedrun-info* active-practice-objective start-zone 0 on-enter)
      ;;           (lambda ()
      ;;             (when (and *target* (>= (-> *target* control ctrl-xz-vel) (meters 30.0)))
      ;;               (vector-copy! (-> *target* control transv) *zero-vector*))
      ;;             (set! (-> *speedrun-info* waiting-to-record-practice-attempt?) #f)
      ;;             (reset! (the-as speedrun-timer (ppointer->process (-> *speedrun-manager* 0 timer))))
      ;;             (none)))

      ;;     (when (= 0 (-> *speedrun-info* active-practice-objective end-task))
      ;;       (set! (-> *speedrun-info* active-practice-objective end-zone)
      ;;         (the-as (pointer objective-zone) (process-spawn objective-zone :init objective-zone-init #f (-> *speedrun-info* active-practice-objective end-zone-init-params))))
      ;;       (set! (-> *speedrun-info* active-practice-objective end-zone 0 on-enter)
      ;;             (lambda ()
      ;;               (when (-> *speedrun-info* waiting-to-record-practice-attempt?)
      ;;                 (stop! (the-as speedrun-timer (ppointer->process (-> *speedrun-manager* 0 timer))))
      ;;                 (if (pc-sr-mode-record-practice-entry-attempt! (-> *speedrun-info* active-practice-objective index)
      ;;                                                                  #t
      ;;                                                                  (&-> (the-as speedrun-timer (ppointer->process (-> *speedrun-manager* 0 timer))) recorded-time))
      ;;                   (sound-play "skill-pickup")
      ;;                   (sound-play "menu-pick"))
      ;;                 (set! (-> *speedrun-info* waiting-to-record-practice-attempt?) #f))
      ;;               (none))))
      ;;     (set! (-> *speedrun-info* practicing?) #t)
      ;;     (reset! (-> *speedrun-info* active-practice-objective))
      ;;     (set-master-mode 'game)
      ;;     (send-event (ppointer->process (-> *speedrun-manager* 0 popup-menu)) 'close-menu))
      ;;   :entry-selected? (lambda ((index int)) (and (-> *speedrun-info* practicing?) (= index (-> *speedrun-info* active-practice-objective index)))))
      ;; (new 'static 'popup-menu-button :label "Stop practicing"
      ;;   :entry-disabled? (lambda () (not (-> *speedrun-info* practicing?)))
      ;;   :on-confirm (lambda ()
      ;;     (when (-> *speedrun-info* practicing?)
      ;;       (when (nonzero? (-> *speedrun-info* active-practice-objective start-zone))
      ;;         (deactivate (-> *speedrun-info* active-practice-objective start-zone 0)))
      ;;       (when (nonzero? (-> *speedrun-info* active-practice-objective end-zone))
      ;;         (deactivate (-> *speedrun-info* active-practice-objective end-zone 0))))
      ;;       (set! (-> *speedrun-info* practicing?) #f)
      ;;       (set! (-> (the-as speedrun-timer (ppointer->process (-> *speedrun-manager* 0 timer))) draw?) #f)))
      (new 'static 'popup-menu-submenu :label "Tools"
        :entries (new 'static 'boxed-array :type popup-menu-entry
          (new 'static 'popup-menu-submenu :label "Create custom category"
            :entries (new 'static 'boxed-array :type popup-menu-entry
              (new 'static 'popup-menu-dynamic-submenu :label "Select secrets"
                :get-length (lambda () 18)
                :get-entry-label (lambda ((index int) (str-dest string)) (copy-string<-string str-dest (bitfield->string game-secrets index)))
                :on-entry-confirm (lambda ((index int)) (logxor! (-> *speedrun-info* dump-custom-category secrets) (shl 1 index)))
                :entry-selected? (lambda ((index int)) (logtest? (-> *speedrun-info* dump-custom-category secrets) (shl 1 index)))
                :on-reset (lambda () (set! (-> *speedrun-info* dump-custom-category secrets) (game-secrets))))
              (new 'static 'popup-menu-dynamic-submenu :label "Select features"
                :get-length (lambda () 27)
                :get-entry-label (lambda ((index int) (str-dest string)) (copy-string<-string str-dest (bitfield->string game-feature index)))
                :on-entry-confirm (lambda ((index int)) (logxor! (-> *speedrun-info* dump-custom-category features) (shl 1 index)))
                :entry-selected? (lambda ((index int)) (logtest? (-> *speedrun-info* dump-custom-category features) (shl 1 index)))
                :on-reset (lambda () (set! (-> *speedrun-info* dump-custom-category features) (game-feature))))
              (new 'static 'popup-menu-dynamic-submenu :label "Forbid features"
                :get-length (lambda () 27)
                :get-entry-label (lambda ((index int) (str-dest string)) (copy-string<-string str-dest (bitfield->string game-feature index)))
                :on-entry-confirm (lambda ((index int)) (logxor! (-> *speedrun-info* dump-custom-category forbidden-features) (shl 1 index)))
                :entry-selected? (lambda ((index int)) (logtest? (-> *speedrun-info* dump-custom-category forbidden-features) (shl 1 index)))
                :on-reset (lambda () (set! (-> *speedrun-info* dump-custom-category forbidden-features) (game-feature))))
              (new 'static 'popup-menu-dynamic-submenu :label "Select cheats"
                :get-length (lambda () 20)
                :get-entry-label (lambda ((index int) (str-dest string)) (copy-string<-string str-dest (bitfield->string pc-cheats index)))
                :on-entry-confirm (lambda ((index int)) (logxor! (-> *speedrun-info* dump-custom-category pc-cheats) (shl 1 index)))
                :entry-selected? (lambda ((index int)) (logtest? (-> *speedrun-info* dump-custom-category pc-cheats) (shl 1 index)))
                :on-reset (lambda () (set! (-> *speedrun-info* dump-custom-category pc-cheats) (pc-cheats))))
              (new 'static 'popup-menu-dynamic-submenu :label "Select completed task"
                :get-length (lambda () (dec (the int (game-task max))))
                :get-entry-label (lambda ((index int) (str-dest string)) (copy-string<-string str-dest (enum->string game-task index)))
                :on-entry-confirm (lambda ((index int)) (set! (-> *speedrun-info* dump-custom-category completed-task) (the game-task index)))
                :entry-selected? (lambda ((index int)) (= (-> *speedrun-info* dump-custom-category completed-task) (the game-task index)))
                :on-reset (lambda () (set! (-> *speedrun-info* dump-custom-category completed-task) (game-task none))))
              (new 'static 'popup-menu-button :label "Save new category to file"
                :on-confirm (lambda () (pc-sr-mode-dump-new-custom-category (-> *speedrun-info* dump-custom-category))))))))
      (new 'static 'popup-menu-button :label "Exit"
        :on-confirm (lambda () (send-event (ppointer->process *speedrun-manager*) 'invoke (speedrun-menu-command exit))))
  ))

(define *speedrun-manager* (the-as (pointer speedrun-manager) #f))

(defbehavior speedrun-manager-init speedrun-manager ()
  (format 0 "speedrun-manager-init~%")
  (set! *speedrun-manager* (the-as (pointer speedrun-manager) (process->ppointer self)))
  (set! (-> *speedrun-manager* 0 popup-menu)
        (the-as (pointer popup-menu) (process-spawn popup-menu :init popup-menu-init "Speedrun Menu" *speedrun-popup-menu-entries*)))
  (set! (-> *speedrun-manager* 0 timer)
        (the-as (pointer speedrun-timer) (process-spawn speedrun-timer :init speedrun-timer-init)))
  (set! (-> *speedrun-manager* 0 ignore-menu-toggle?) #f)
  (set! (-> *speedrun-manager* 0 opened-with-start?) #f)
  (set! (-> *speedrun-info* practicing?) #f)
  (set! (-> *speedrun-info* waiting-to-record-practice-attempt?) #f)
  (go-virtual idle)
  (none))

(defmethod update! ((this speedrun-info))
  "A per frame update for speedrunning related stuff"
  ;; (format 0 "blackout ~D vs cur ~D~%" (-> *game-info* blackout-time) (get-current-time))
  ;; (format 0 "bg-a-force ~F~%" (-> *setting-control* user-default bg-a-force))

  ;; Ensure the speedrunner menu process is enabled or destroyed
  (when (and (-> *pc-settings* speedrunner-mode?)
             (not *speedrun-manager*))
    (format 0 "speedrun-manager = ~A~%" *speedrun-manager*)
    (process-spawn speedrun-manager :init speedrun-manager-init #f :to *active-pool*))
  (when (and (not (-> *pc-settings* speedrunner-mode?))
             *speedrun-manager*)
    (format 0 "deactivating speedrun-manager~%")
    (deactivate (-> *speedrun-manager* 0)))
  ;; do speedrunner mode things
  (when (-> *pc-settings* speedrunner-mode?)
    ;; Update auto-splitter struct
    (update! *autosplit-info-jak2*)
    ;; see if we should stop drawing the run info (after 10 seconds from starting run)
    (when (and (!= (-> this category) (speedrun-category custom))
              ;;  (task-complete? *game-info* (game-task fortress-escape))
               (time-elapsed? (-> this run-started-at) (seconds 10)))
      (set! (-> this display-run-info?) #f))
    
    ;; if we have an end task...
    (when (!= (-> *speedrun-info* active-practice-objective end-task) (game-task none))
      ;; ensure timer is shown
      (set! (-> (the-as speedrun-timer (ppointer->process (-> *speedrun-manager* 0 timer))) draw?) #t)
      ;; stop timer if player finished the end-task
      (when (task-resolution-closed? (-> *speedrun-info* active-practice-objective end-task))
        (stop! (the-as speedrun-timer (ppointer->process (-> *speedrun-manager* 0 timer))))))

    ;; Draw info to the screen
    (when (and (not (-> *speedrun-info* practicing?)) (-> this display-run-info?))
      (draw-run-info this))
    ;; enforce settings even if they've changed them
    (enforce-settings! this)
    ;; draw objective info if practicing
    (when (-> *speedrun-info* practicing?)
      (draw-info (-> this active-practice-objective))))
  (none))

(defmethod draw-run-info ((this speedrun-info))
  "Draw speedrun related settings in the bottom left corner"
  (when (and (-> *pc-settings* speedrunner-mode?)
             (-> this display-run-info?))
    (clear *temp-string*)
    (clear *pc-encoded-temp-string*)
    (clear *pc-cpp-temp-string*)
    (cond
      ((= (-> this category) (speedrun-category custom))
       (pc-sr-mode-get-custom-category-name (-> this active-custom-category index) *pc-cpp-temp-string*)
       (format *temp-string*
               "<COLOR_WHITE>Category: <COLOR_GREEN>~S~%<COLOR_WHITE>Secrets: <COLOR_GREEN>~D~%<COLOR_WHITE>Features: <COLOR_GREEN>~D~%<COLOR_WHITE>Forbidden Features: <COLOR_GREEN>~D~%<COLOR_WHITE>Cheats: <COLOR_GREEN>~D~%<COLOR_WHITE>Mod Version: <COLOR_GREEN>~S~%"
               *pc-cpp-temp-string*
               (-> this active-custom-category secrets)
               (-> this active-custom-category features)
               (-> this active-custom-category forbidden-features)
               (-> this active-custom-category pc-cheats)
               *mod-version-text*))
      (else
        (format *temp-string*
              "<COLOR_WHITE>Category: <COLOR_GREEN>~S~%<COLOR_WHITE>PC Cheats: <COLOR_GREEN>~D~%<COLOR_WHITE>Frame Rate: <COLOR_GREEN>~D~%<COLOR_WHITE>PS2 Actor Vis?: <COLOR_GREEN>~S~%<COLOR_WHITE>Mod Version: <COLOR_GREEN>~S~%"
              (enum->string speedrun-category (-> this category))
              (the-as int (-> *pc-settings* cheats))
              (-> *pc-settings* target-fps)
              (if (-> *pc-settings* ps2-actor-vis?) "true" "false")
              *mod-version-text*)))
    (pc-encode-utf8-string *temp-string* *pc-encoded-temp-string*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf2))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 (if (= (-> this category) (speedrun-category custom)) 355 365) 0.0 (font-color default) (font-flags right shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-temp-string* buf font-ctx))))
  (none))

;; Speedrun Menu

(defmethod deactivate ((this speedrun-manager))
  ;; (format 0 "deactivate speedrun-manager~%")
  (set! *speedrun-manager* (the-as (pointer speedrun-manager) #f))
  ((method-of-type process deactivate) this)
  (none))

(defstate idle (speedrun-manager)
  :virtual #t
  :event (behavior ((proc process) (arg1 int) (event-type symbol) (event event-message-block))
    (case event-type
      (('start-run)
       (set-time! (-> *speedrun-info* run-started-at)))
      (('invoke)
       (case (-> event param 0)
        (((speedrun-menu-command reset))
         (set! (-> (the-as speedrun-timer (ppointer->process (-> *speedrun-manager* 0 timer))) draw?) #f)
         (set-master-mode 'game)
         (send-event (ppointer->process (-> self popup-menu)) 'close-menu)
         (start-run! *speedrun-info*))
        (((speedrun-menu-command exit))
         (set-master-mode 'game)
         (send-event (ppointer->process (-> self popup-menu)) 'close-menu))
        (else
          (format 0 "nyi: invoke ~D~%" (-> event param 0))))))
    (the-as object 0))
  :trans (behavior ()
    (none))
  :code (behavior ()
    (until #f
      (when (and (-> *speedrun-info* practicing?) (cpad-pressed? 0 l3))
        (reset! (-> *speedrun-info* active-practice-objective)))
      (when (and (-> *speedrun-info* display-run-info?)
                ;;  (= (-> *speedrun-info* category) (speedrun-category custom))
                 (time-elapsed? (-> *speedrun-info* run-started-at) (seconds 10)))
        (set! (-> *speedrun-info* display-run-info?) #f))
      (suspend))
    (none))
  :post (behavior ()
    (none)))

(defmethod draw-menu ((this speedrun-manager))
  ;; don't allow the menu to open during blackouts, apparently causes bugs
  (when (>= (-> *game-info* blackout-time) (get-current-time))
    (return 0))
  ;; handle opening and closing the menu
  (cond
    ((!= (-> *pc-settings* speedrunner-mode-custom-bind) 0)
     ;; the user has let go of the keybind completely or partially, allow the bind to trigger again
     (when (and (-> this ignore-menu-toggle?)
                (!= (cpad-hold 0)
                    (logior (cpad-hold 0) (-> *pc-settings* speedrunner-mode-custom-bind))))
      (set! (-> this ignore-menu-toggle?) #f))
     ;; bind handler
     (when (and (not (-> this ignore-menu-toggle?))
                (= (cpad-hold 0)
                   (logior (cpad-hold 0) (-> *pc-settings* speedrunner-mode-custom-bind))))
      (cond
        ((= *master-mode* 'game)
         (set-master-mode 'menu)
         (send-event (ppointer->process (-> this popup-menu)) 'open-menu))
        ((= *master-mode* 'menu)
         (set-master-mode 'game)
         (send-event (ppointer->process (-> this popup-menu)) 'close-menu)))
      (logclear! (cpad-hold 0) (-> *pc-settings* speedrunner-mode-custom-bind))
      (logclear! (cpad-pressed 0) (-> *pc-settings* speedrunner-mode-custom-bind))
      (set! (-> this ignore-menu-toggle?) #t)))
    (else
     (when (and (-> this ignore-menu-toggle?)
            (or (not (cpad-hold? 0 l1)) (not (cpad-hold? 0 r1)))
            (or (and (-> this opened-with-start?) (not (cpad-hold? 0 start)))
                (and (not (-> this opened-with-start?)) (not (cpad-hold? 0 select)))))
       (set! (-> this ignore-menu-toggle?) #f))
     (when (and (cpad-hold? 0 l1) (cpad-hold? 0 r1) (or (cpad-hold? 0 select) (cpad-hold? 0 start))
               (not (-> this ignore-menu-toggle?)))
       (cond
         ((= *master-mode* 'game)
          (set-master-mode 'menu)
          (send-event (ppointer->process (-> this popup-menu)) 'open-menu))
         ((= *master-mode* 'menu)
          (set-master-mode 'game)
          (send-event (ppointer->process (-> this popup-menu)) 'close-menu)))
       (cpad-clear! 0 l1 r1)
       (cond
         ((cpad-hold? 0 select)
          (cpad-clear! 0 select)
          (set! (-> this opened-with-start?) #f))
         ((cpad-hold? 0 start)
          (cpad-clear! 0 start)
          (set! (-> this opened-with-start?) #t)))
       (set! (-> this ignore-menu-toggle?) #t))))
  ;; render menu / handle inputs
  (update-menu! (the-as popup-menu (ppointer->process (-> this popup-menu))))
  (none))
