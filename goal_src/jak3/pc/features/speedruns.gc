;;-*-Lisp-*-
(in-package goal)

;; TODO later - customize menu open keybind

(define-extern task-close! (function string symbol))
(define-extern task-resolution-closed? (function game-task symbol))

(define-extern *pc-dead-pool* dead-pool)

(define *speedrun-info* (new 'static 'speedrun-info))

(set! (-> *speedrun-info* active-custom-category) (new 'static 'speedrun-custom-category))

(set! (-> *speedrun-info* dump-custom-category) (new 'static 'speedrun-custom-category))

(set! (-> *speedrun-info* active-practice-objective) (new 'static 'speedrun-practice-objective))

(set! (-> *speedrun-info* active-practice-objective starting-position) (new 'static 'vector))

(set! (-> *speedrun-info* active-practice-objective starting-rotation) (new 'static 'vector))

(set! (-> *speedrun-info* active-practice-objective starting-camera-position) (new 'static 'vector))

(set! (-> *speedrun-info* active-practice-objective starting-camera-rotation) (new 'static 'matrix))

(set! (-> *speedrun-info* active-practice-objective start-zone-init-params) (new 'static 'objective-zone-init-params))

(set! (-> *speedrun-info* active-practice-objective end-zone-init-params) (new 'static 'objective-zone-init-params))

(defun print-timer-text ((s string) (x int) (y int))
  (pc-encode-utf8-string s *pc-encoded-temp-string*)
  (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
    ;; reset bucket settings prior to drawing - font won't do this for us, and
    ;; draw-raw-image can sometimes mess them up. (intro sequence)
    (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
    (let ((font-ctx (new 'stack 'font-context *font-default-matrix* x y 0.0 (font-color default) (font-flags shadow kerning large))))
      (set! (-> font-ctx scale) 0.25)
      (draw-string-adv *pc-encoded-temp-string* buf font-ctx)))
  (none)
  )

(defun get-speedrun-end-results-text ()
  (let* ((timer (the-as speedrun-timer (ppointer->process (-> *speedrun-manager* 0 timer))))
         (total-sec (the int (* (the float (- (-> timer end-time) (-> timer start-time))) 0.0033333334)))
         (min (/ total-sec 60))
         (sec (- total-sec (* min 60))))
    (clear *temp-string*)
    (clear *pc-encoded-temp-string*)
    (format *temp-string* "~4L~S~%" (-> *speedrun-category-names* (-> *speedrun-info* category)))
    (format *temp-string* "~6LMission Completed~%~%")
    (format *temp-string* "~0LMission Time: ~D:~2,'0D~%~%" min sec)
    ;; TODO - kill stats
    ;; (format *temp-string* "Enemies Killed: ~D~%" (get-jak-enemy-kill-count (-> *statistics* kill-stats)))
    ;; (format *temp-string* "Civilians Killed: ~D~%~%" (get-jak-friendly-kill-count (-> *statistics* kill-stats)))
    ;; (format *temp-string* "Press START to continue~%")
    (pc-encode-utf8-string *temp-string* *pc-encoded-temp-string*)
    ;; return
    *pc-encoded-temp-string*
    )
  )  

;; (defun play-music ((music-name symbol) (flava uint) (mode uint))
(defun play-music ((music-name symbol) (mode uint))
  ;; (set! (-> *progress-state-pc* music-player-track) info)
  (set-setting! 'music music-name 0.0 0)
  ;; (set-setting! 'sound-flava #f 999999.0 flava)
  (set-setting! 'sound-mode #f 0.0 mode)
  ;; (sound-group-continue (the-as sound-group #xffffffff))
  (apply-settings *setting-control*)
  (sound-group-continue (sound-group music dialog dialog2))
  (none)
  )

(defmethod draw-timer ((this speedrun-timer))
  (clear *temp-string*)
  (clear *pc-encoded-temp-string*)
  (cond
    ((-> this started?)
      (format *temp-string* "~,,2fs~%" (* (the float (- (get-real-current-time) (-> this start-time))) 0.0033333334))
      ;; show speed in practice mode
      (when (and *target* (-> *speedrun-info* practicing?))
        (format *temp-string* "~,,2M~%" (-> *target* control ctrl-xz-vel)))

      (print-timer-text *temp-string* 2 406)
      )
    ((and (!= 0 (-> this end-time)))
      (until (progress-allowed?)
          (suspend))
      (let ((tmp-music-name (-> *setting-control* user-current music))
            ;; (tmp-flava (-> *setting-control* user-current sound-flava))
            (tmp-mode (-> *setting-control* user-current sound-mode)))
        (activate-progress *dproc* 'speedrun-end-results)
        (suspend-for (seconds 0.1))
        (play-music 'mcredits (the uint 0))
        ;; (print-stats (-> *statistics* kill-stats) #t)
        (until (progress-allowed?)
          (suspend))
        ;; stop race music, maybe resume old music
        (remove-setting! 'music)
        (apply-settings *setting-control*)
        ;; (sound-group-pause (sound-group music))
        (when tmp-music-name
          (play-music tmp-music-name tmp-mode))
        (set! (-> this end-time) 0)
        )
      )
    (else
      (format *temp-string* "0.0s~%")
      (print-timer-text *temp-string* 2 406)
      )
    )
  (none))

(defmethod start! ((this speedrun-timer))
  (true! (-> this started?))
  (false! (-> this stopped?))
  (set! (-> this start-time) (get-real-current-time))
  (set! (-> this end-time) 0))

(defmethod reset! ((this speedrun-timer))
  (false! (-> this started?))
  (false! (-> this stopped?))
  (set! (-> this start-time) 0)
  (set! (-> this end-time) 0))

(defmethod stop! ((this speedrun-timer))
  (when (not (-> this stopped?))
    (false! (-> this started?))
    (true! (-> this stopped?))
    (set! (-> this end-time) (get-real-current-time))
    (set! (-> this recorded-time) (* (the float (- (-> this end-time) (-> this start-time))) 0.0033333334)))
  (-> this recorded-time))

(defmethod set-category! ((this speedrun-info) (category speedrun-category))
  (set! (-> this category) category))

(defmethod start-individual-level-run! ((this speedrun-info) (tsk game-task))
  (set! (-> this active-practice-objective end-task) tsk)
  (start 'play (get-continue-by-name *game-info* (play-task tsk 'debug 'play)))
  (set-master-mode 'game)
  ;; spawn a process that suspends until jak is properly spawned, before starting timer
  (process-spawn-function process (lambda :behavior process ()
    (let ((target-continued? #f))
      (until (and target-continued?
                  (< (-> *game-info* blackout-time) (get-current-time)) 
                  (= (-> *setting-control* user-default bg-a-force) 0.0))
        ;; (if *target* (format 0 "target is in state ~A~%" (-> *target* next-state name)))
        (suspend)
        (when (and *target* (!= (-> *target* next-state name) 'target-continue))
          (true! target-continued?)))
      )
    (start! (the-as speedrun-timer (ppointer->process (-> *speedrun-manager* 0 timer))))))
  (none)
  )

(defconstant HERO_MODE_SECRETS
  (game-secrets hero-mode
                endless-ammo
                invulnerable
                endless-dark
                endless-light
                unlimited-turbos
                vehicle-hit-points
                board-fast
                vehicle-fox
                vehicle-mirage
                vehicle-x-ride
                darkjak-tracking
                button-invis
                gun-upgrade-red-1
                gun-upgrade-red-2
                gun-upgrade-red-3
                gun-upgrade-yellow-1
                gun-upgrade-yellow-2
                gun-upgrade-yellow-3
                gun-upgrade-blue-1
                gun-upgrade-blue-2
                gun-upgrade-blue-3
                gun-upgrade-dark-1
                gun-upgrade-dark-2
                gun-upgrade-dark-3
                gun-upgrade-ammo-red
                gun-upgrade-ammo-yellow
                gun-upgrade-ammo-blue
                gun-upgrade-ammo-dark))

(defconstant HERO_MODE_FEATURES
  (game-feature gun
                gun-red-1
                gun-red-2
                gun-red-3
                gun-yellow-1
                gun-yellow-2
                gun-yellow-3
                gun-blue-1
                gun-blue-2
                gun-blue-3
                gun-dark-1
                gun-dark-2
                gun-dark-3
                board
                gun-upgrade-yellow-ammo-1
                gun-upgrade-yellow-ammo-2
                gun-upgrade-red-ammo-1
                gun-upgrade-red-ammo-2
                gun-upgrade-blue-ammo-1
                gun-upgrade-blue-ammo-2
                gun-upgrade-dark-ammo-1
                gun-upgrade-dark-ammo-2
                board-launch
                board-zap
                darkjak
                darkjak-bomb0
                darkjak-bomb1
                lightjak
                lightjak-regen
                lightjak-freeze
                lightjak-shield
                armor0
                armor1
                armor2
                armor3
                lighteco
                darkeco))

(defmethod start-run! ((this speedrun-info))
  ;; randomize game id so the autosplitter knows to restart
  (reset! *autosplit-info-jak3*)
  ;; turn on speedrun verification display
  (true! (-> this display-run-info?))
  (send-event (ppointer->process *speedrun-manager*) 'start-run)
  ;; ensure any required settings are enabled
  (enforce-settings! this)
  ;; reset end-task 
  (set! (-> this active-practice-objective end-task) (game-task none))
  ;; finalize any category specific setup code
  (case (-> this category)
    (((speedrun-category newgame-normal))
     (set! (-> *game-info* mode) 'debug)
     (initialize! *game-info* 'game (the game-save #f) (the string #f) (the resetter-spec #f))
     (set! (-> *game-info* mode) 'play)
     (start 'play (get-continue-by-name *game-info* "wasstada-jump-training"))
     (play-task (game-task arena-training-1) 'debug #f))
    (((speedrun-category newgame-heromode))
     (process-spawn-function process
       (lambda :behavior process ()
         (set! (-> *game-info* mode) 'debug)
         (initialize! *game-info* 'game (the game-save #f) (the string #f) (the resetter-spec #f))
         (set! (-> *game-info* mode) 'play)
         (logior! (-> *game-info* secrets) (game-secrets hero-mode))
         (logior! (-> *game-info* purchase-secrets) (game-secrets hero-mode))
         (start 'play (get-continue-by-name *game-info* "wasstada-jump-training"))
         (play-task (game-task arena-training-1) 'debug #f)
         (until (and *target* (= (-> *target* next-state name) 'target-stance))
           (suspend))
         (set! (-> *game-info* secrets) HERO_MODE_SECRETS)
         (set! (-> *game-info* purchase-secrets) HERO_MODE_SECRETS)
         (set! (-> *game-info* features) HERO_MODE_FEATURES))))
    (((speedrun-category all-cheats-allowed))
     (process-spawn-function process
       (lambda :behavior process ()
         (set! (-> *game-info* mode) 'debug)
         (initialize! *game-info* 'game (the game-save #f) (the string #f) (the resetter-spec #f))
         (set! (-> *game-info* mode) 'play)
         (start 'play (get-continue-by-name *game-info* "wasstada-jump-training"))
         (play-task (game-task arena-training-1) 'debug #f))))
    ;; Act 1 ILs
    (((speedrun-category arena-training-1))
      (start-individual-level-run! this (game-task arena-training-1)))
    (((speedrun-category arena-fight-1))
      (start-individual-level-run! this (game-task arena-fight-1)))
    (((speedrun-category wascity-chase))
      (start-individual-level-run! this (game-task wascity-chase)))
    (((speedrun-category wascity-pre-game))
      (start-individual-level-run! this (game-task wascity-pre-game)))
    (((speedrun-category desert-turtle-training))
      (start-individual-level-run! this (game-task desert-turtle-training)))
    (((speedrun-category desert-course-race))
      (start-individual-level-run! this (game-task desert-course-race)))
    (((speedrun-category desert-artifact-race-1))
      (start-individual-level-run! this (game-task desert-artifact-race-1)))
    (((speedrun-category wascity-leaper-race))
      (start-individual-level-run! this (game-task wascity-leaper-race)))
    (((speedrun-category desert-hover))
      (start-individual-level-run! this (game-task desert-hover)))
    (((speedrun-category arena-fight-2))
      (start-individual-level-run! this (game-task arena-fight-2)))
    (((speedrun-category desert-catch-lizards))
      (start-individual-level-run! this (game-task desert-catch-lizards)))
    (((speedrun-category desert-rescue))
      (start-individual-level-run! this (game-task desert-rescue)))
    (((speedrun-category wascity-gungame))
      (start-individual-level-run! this (game-task wascity-gungame)))
    (((speedrun-category arena-fight-3))
      (start-individual-level-run! this (game-task arena-fight-3)))
    (((speedrun-category nest-eggs))
      (start-individual-level-run! this (game-task nest-eggs)))
    (((speedrun-category temple-climb))
      (start-individual-level-run! this (game-task temple-climb)))
    (((speedrun-category desert-glide))
      (start-individual-level-run! this (game-task desert-glide)))
    (((speedrun-category volcano-darkeco))
      (start-individual-level-run! this (game-task volcano-darkeco)))
    (((speedrun-category temple-oracle))
      (start-individual-level-run! this (game-task temple-oracle)))
    (((speedrun-category desert-oasis-defense))
      (start-individual-level-run! this (game-task desert-oasis-defense)))
    (((speedrun-category temple-tests))
      (start-individual-level-run! this (game-task temple-tests)))
    (((speedrun-category comb-travel))
      (start-individual-level-run! this (game-task comb-travel)))
    (((speedrun-category mine-explore))
      (start-individual-level-run! this (game-task mine-explore)))
    (((speedrun-category mine-blow))
      (start-individual-level-run! this (game-task mine-blow)))
    (((speedrun-category mine-boss))
      (start-individual-level-run! this (game-task mine-boss)))
    ;; Act 2 ILs
    (((speedrun-category sewer-met-hum))
      (start-individual-level-run! this (game-task sewer-met-hum)))
    (((speedrun-category city-port-fight))
      (start-individual-level-run! this (game-task city-port-fight)))
    (((speedrun-category city-port-attack))
      (start-individual-level-run! this (game-task city-port-attack)))
    (((speedrun-category city-gun-course-1))
      (start-individual-level-run! this (game-task city-gun-course-1)))
    (((speedrun-category city-sniper-fight))
      (start-individual-level-run! this (game-task city-sniper-fight)))
    (((speedrun-category sewer-kg-met))
      (start-individual-level-run! this (game-task sewer-kg-met)))
    (((speedrun-category city-destroy-darkeco))
      (start-individual-level-run! this (game-task city-destroy-darkeco)))
    (((speedrun-category forest-kill-plants))
      (start-individual-level-run! this (game-task forest-kill-plants)))
    (((speedrun-category city-destroy-grid))
      (start-individual-level-run! this (game-task city-destroy-grid)))
    (((speedrun-category city-hijack-vehicle))
      (start-individual-level-run! this (game-task city-hijack-vehicle)))
    (((speedrun-category city-port-assault))
      (start-individual-level-run! this (game-task city-port-assault)))
    (((speedrun-category city-gun-course-2))
      (start-individual-level-run! this (game-task city-gun-course-2)))
    (((speedrun-category city-blow-barricade))
      (start-individual-level-run! this (game-task city-blow-barricade)))
    (((speedrun-category city-protect-hq))
      (start-individual-level-run! this (game-task city-protect-hq)))
    (((speedrun-category sewer-hum-kg))
      (start-individual-level-run! this (game-task sewer-hum-kg)))
    (((speedrun-category city-power-game))
      (start-individual-level-run! this (game-task city-power-game)))
    (((speedrun-category desert-artifact-race-2))
      (start-individual-level-run! this (game-task desert-artifact-race-2)))
    (((speedrun-category nest-hunt))
      (start-individual-level-run! this (game-task nest-hunt)))
    (((speedrun-category desert-beast-battle))
      (start-individual-level-run! this (game-task desert-beast-battle)))
    (((speedrun-category desert-jump-mission))
      (start-individual-level-run! this (game-task desert-jump-mission)))
    (((speedrun-category desert-chase-marauders))
      (start-individual-level-run! this (game-task desert-chase-marauders)))
    (((speedrun-category forest-ring-chase))
      (start-individual-level-run! this (game-task forest-ring-chase)))
    (((speedrun-category factory-sky-battle))
      (start-individual-level-run! this (game-task factory-sky-battle)))
    (((speedrun-category factory-assault))
      (start-individual-level-run! this (game-task factory-assault)))
    (((speedrun-category factory-boss))
      (start-individual-level-run! this (game-task factory-boss)))
    ;; Act 3 ILs
    (((speedrun-category temple-defend))
      (start-individual-level-run! this (game-task temple-defend)))
    (((speedrun-category wascity-defend))
      (start-individual-level-run! this (game-task wascity-defend)))
    (((speedrun-category forest-turn-on-machine))
      (start-individual-level-run! this (game-task forest-turn-on-machine)))
    (((speedrun-category precursor-tour))
      (start-individual-level-run! this (game-task precursor-tour)))
    (((speedrun-category city-blow-tower))
      (start-individual-level-run! this (game-task city-blow-tower)))
    (((speedrun-category tower-destroy))
      (start-individual-level-run! this (game-task tower-destroy)))
    (((speedrun-category palace-ruins-patrol))
      (start-individual-level-run! this (game-task palace-ruins-patrol)))
    (((speedrun-category palace-ruins-attack))
      (start-individual-level-run! this (game-task palace-ruins-attack)))
    (((speedrun-category comb-wild-ride))
      (start-individual-level-run! this (game-task comb-wild-ride)))
    (((speedrun-category precursor-destroy-ship))
      (start-individual-level-run! this (game-task precursor-destroy-ship)))
    (((speedrun-category desert-final-boss))
      (start-individual-level-run! this (game-task desert-final-boss)))
    (((speedrun-category custom))
     (process-spawn-function process
       (lambda :behavior process ()
         (clear *temp-string*)
         (pc-sr-mode-get-custom-category-continue-point (-> *speedrun-info* active-custom-category index) *temp-string*)
         (if (string= *temp-string* EMPTY_STRING)
           (initialize! *game-info* 'game (the game-save #f) "intro-start" (the resetter-spec #f))
           (initialize! *game-info* 'game (the game-save #f) *temp-string* (the resetter-spec #f)))
         (until (and *target* (= (-> *target* next-state name) 'target-stance))
           (suspend))
         (when (nonzero? (-> *speedrun-info* active-custom-category completed-task))
           (task-resolution-close! (-> *speedrun-info* active-custom-category completed-task)))))))
  (if (!= -1 (-> *game-info* auto-save-which)) (set! (-> *setting-control* user-default auto-save) #t)))

(defmethod enforce-settings! ((this speedrun-info))
  (true! (-> *pc-settings* ps2-actor-vis?)) ;; force PS2 actor visibility
  (set-frame-rate! *pc-settings* 60 #t) ;; force FPS to `60`
  ;; For posterity, the main reason why changing the cheats is useful is for two main reasons:
  ;; - If you are playing a category that requires cheats (ie. a turbo jetboard one) you'd
  ;;   probably like the game to automatically set the appropriate ones for you
  ;; - If you are playing a category that forbids cheats, you wouldn't want your run invalidated because you forgot
  (case (-> this category)
    (((speedrun-category newgame-normal) (speedrun-category newgame-heromode))
     ;; disable any active cheats
     (set! (-> *pc-settings* cheats) (pc-cheats)))
    (((speedrun-category custom))
     (set! (-> *game-info* purchase-secrets) (-> *speedrun-info* active-custom-category secrets))
     (set! (-> *game-info* secrets) (-> *speedrun-info* active-custom-category secrets))
     (logior! (-> *game-info* features) (-> *speedrun-info* active-custom-category features))
     (logclear! (-> *game-info* features) (-> *speedrun-info* active-custom-category forbidden-features))
     (logior! (-> *game-info* vehicles) (-> *speedrun-info* active-custom-category vehicles))
     (set! (-> *pc-settings* cheats) (-> *speedrun-info* active-custom-category pc-cheats)))))

(defmethod draw-zone ((this objective-zone))
  (add-debug-box #t
                 (bucket-id debug)
                 (-> this v1)
                 (-> this v2)
                 (if (-> this start?) (static-rgba #xff #xff #x00 #x80) (static-rgba #xff #x00 #xff #x80))))

(defstate waiting-for-player (objective-zone)
  :virtual #t
  :event
    (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
      #t)
  :trans
    (behavior ()
      ;; Check to see if we have entered the zone
      (let ((min-point-x (fmin (-> self v1 x) (-> self v2 x)))
            (min-point-y (fmin (-> self v1 y) (-> self v2 y)))
            (min-point-z (fmin (-> self v1 z) (-> self v2 z)))
            (max-point-x (fmax (-> self v1 x) (-> self v2 x)))
            (max-point-y (fmax (-> self v1 y) (-> self v2 y)))
            (max-point-z (fmax (-> self v1 z) (-> self v2 z)))
            (pos (target-pos 0)))
        (when (and (and (<= min-point-x (-> pos x)) (<= (-> pos x) max-point-x))
                   (and (<= min-point-y (-> pos y)) (<= (-> pos y) max-point-y))
                   (and (<= min-point-z (-> pos z)) (<= (-> pos z) max-point-z)))
          (when (nonzero? (-> self on-enter))
            ((-> self on-enter)))
          (go-virtual player-inside))))
  :code
    (behavior ()
      (loop
        (draw-zone self)
        (suspend))))

(defstate player-inside (objective-zone)
  :virtual #t
  :trans
    (behavior ()
      ;; Check to see if we have entered the zone
      (let ((min-point-x (fmin (-> self v1 x) (-> self v2 x)))
            (min-point-y (fmin (-> self v1 y) (-> self v2 y)))
            (min-point-z (fmin (-> self v1 z) (-> self v2 z)))
            (max-point-x (fmax (-> self v1 x) (-> self v2 x)))
            (max-point-y (fmax (-> self v1 y) (-> self v2 y)))
            (max-point-z (fmax (-> self v1 z) (-> self v2 z)))
            (pos (target-pos 0)))
        (when (not (and (and (<= min-point-x (-> pos x)) (<= (-> pos x) max-point-x))
                        (and (<= min-point-y (-> pos y)) (<= (-> pos y) max-point-y))
                        (and (<= min-point-z (-> pos z)) (<= (-> pos z) max-point-z))))
          (when (nonzero? (-> self on-exit))
            ((-> self on-exit)))
          (go-virtual waiting-for-player))))
  :code
    (behavior ()
      (loop
        (draw-zone self)
        (suspend))))

(defbehavior objective-zone-init-by-other objective-zone ((start? symbol) (params objective-zone-init-params))
  (set! (-> self start?) start?)
  (vector-copy! (-> self v1) (-> params v1))
  (vector-copy! (-> self v2) (-> params v2))
  (go-virtual waiting-for-player))

(defmethod draw-info ((this speedrun-practice-objective))
  (clear *temp-string*)
  (clear *pc-encoded-temp-string*)
  (pc-sr-mode-get-practice-entry-name (-> this index) *pc-encoded-temp-string*)
  (format *temp-string* "<COLOR_WHITE>Practicing: <COLOR_GREEN>~S~%" *pc-encoded-temp-string*)
  (if (> (pc-sr-mode-get-practice-entry-history-attempts (-> this index)) 0)
    (format *temp-string*
            "<COLOR_WHITE>History: <COLOR_GREEN>~D<COLOR_WHITE>/~D (~,,2f%)~%"
            (pc-sr-mode-get-practice-entry-history-success (-> this index))
            (pc-sr-mode-get-practice-entry-history-attempts (-> this index))
            (* 100.0
               (/ (the float (pc-sr-mode-get-practice-entry-history-success (-> this index)))
                  (the float (pc-sr-mode-get-practice-entry-history-attempts (-> this index))))))
    (format *temp-string* "<COLOR_WHITE>History: --~%"))
  (if (> (pc-sr-mode-get-practice-entry-session-attempts (-> this index)) 0)
    (format *temp-string*
            "<COLOR_WHITE>Session: <COLOR_GREEN>~D<COLOR_WHITE>/~D (~,,2f%)~%"
            (pc-sr-mode-get-practice-entry-session-success (-> this index))
            (pc-sr-mode-get-practice-entry-session-attempts (-> this index))
            (* 100.0
               (/ (the float (pc-sr-mode-get-practice-entry-session-success (-> this index)))
                  (the float (pc-sr-mode-get-practice-entry-session-attempts (-> this index))))))
    (format *temp-string* "<COLOR_WHITE>Session: --~%"))
  (pc-sr-mode-get-practice-entry-avg-time (-> this index) *pc-encoded-temp-string*)
  (format *temp-string* "<COLOR_WHITE>Average Time: <COLOR_GREEN>~Ss~%" *pc-encoded-temp-string*)
  (pc-sr-mode-get-practice-entry-fastest-time (-> this index) *pc-encoded-temp-string*)
  (format *temp-string* "<COLOR_WHITE>Fastest Time: <COLOR_GREEN>~Ss~%" *pc-encoded-temp-string*)
  (format *temp-string* "<COLOR_WHITE>\c91 L3: Reset~%")
  (pc-encode-utf8-string *temp-string* *pc-encoded-temp-string*)
  (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf2))
    ;; reset bucket settings prior to drawing - font won't do this for us, and
    ;; draw-raw-image can sometimes mess them up. (intro sequence)
    (dma-buffer-add-gs-set-flusha buf
                                  (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1))
                                  (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
    (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 20 0.0 (font-color default) (font-flags right shadow kerning large))))
      (set! (-> font-ctx scale) 0.325)
      (draw-string-adv *pc-encoded-temp-string* buf font-ctx))))

(defmethod reset! ((this speedrun-practice-objective))
  ;; record attempt if attempt was started
  (when (-> *speedrun-info* waiting-to-record-practice-attempt?)
    (pc-sr-mode-record-practice-entry-attempt! (-> this index)
                                               #f
                                               (&-> (the speedrun-timer (ppointer->process (-> *speedrun-manager* 0 timer))) recorded-time)))
  ;; TODO - load checkpoint if not already in that checkpoint
  ;; TODO - set features / cheats / completed-task / etc
  ;; Update player position
  (vector-copy! (-> *target* root trans) (-> this starting-position))
  (vector-copy! (-> *target* root quat) (-> this starting-rotation))
  ;; - get off jetboard and reset speed
  (vector-copy! (-> *target* control transv) *zero-vector*)
  (send-event *target* 'change-mode 'normal)
  ;; Update camera position and rotation
  (vector-copy! (-> *camera-combiner* trans) (-> this starting-camera-position))
  (matrix-identity! (-> *camera-combiner* inv-camera-rot))
  (matrix-copy! (-> *camera-combiner* inv-camera-rot) (-> this starting-camera-rotation))
  (process-spawn-function process
    (lambda :behavior process ()
      (suspend)
      (send-event *camera* 'teleport)
      (deactivate self)))
  (cam-master-activate-slave #f))

(define *speedrun-popup-menu-entries*
  (new 'static
       'boxed-array
       :type
       popup-menu-entry
       (new 'static
            'popup-menu-button
            :label "Reset"
            :on-confirm
            (lambda ()
              (send-event (ppointer->process *speedrun-manager*) 'invoke (speedrun-menu-command reset))
              (send-event (-> *speedrun-manager* 0 popup-menu 0) 'close-menu)))
       (new 'static
            'popup-menu-submenu
            :label "Built-in Category Select"
            :entries
            (new 'static
                 'boxed-array
                 :type
                 popup-menu-entry
                 (new 'static
                      'popup-menu-flag
                      :label "Normal"
                      :on-confirm
                      (lambda ()
                        (set-category! *speedrun-info* (speedrun-category newgame-normal)))
                      :is-toggled?
                      (lambda ()
                        (= (-> *speedrun-info* category) (speedrun-category newgame-normal))))
                 (new 'static
                      'popup-menu-flag
                      :label "Hero Mode"
                      :on-confirm
                      (lambda ()
                        (set-category! *speedrun-info* (speedrun-category newgame-heromode)))
                      :is-toggled?
                      (lambda ()
                        (= (-> *speedrun-info* category) (speedrun-category newgame-heromode))))
                 (new 'static
                      'popup-menu-flag
                      :label "All Cheats Allowed"
                      :on-confirm
                      (lambda ()
                        (set-category! *speedrun-info* (speedrun-category all-cheats-allowed)))
                      :is-toggled?
                      (lambda ()
                        (= (-> *speedrun-info* category) (speedrun-category all-cheats-allowed))))
                 (new 'static 'popup-menu-submenu :label "Act 1 Individual Levels"
                  :entries (new 'static 'boxed-array :type popup-menu-entry 
                    (new 'static 'popup-menu-flag :label "Complete Arena Training Course"
                      :on-confirm (lambda () (set-category! *speedrun-info* (speedrun-category arena-training-1)))
                      :is-toggled? (lambda () (= (-> *speedrun-info* category) (speedrun-category arena-training-1))))
                    (new 'static 'popup-menu-flag :label "Earn 1st War Amulet"
                      :on-confirm (lambda () (set-category! *speedrun-info* (speedrun-category arena-fight-1)))
                      :is-toggled? (lambda () (= (-> *speedrun-info* category) (speedrun-category arena-fight-1))))
                    (new 'static 'popup-menu-flag :label "Catch Kanga-Rats"
                      :on-confirm (lambda () (set-category! *speedrun-info* (speedrun-category wascity-chase)))
                      :is-toggled? (lambda () (= (-> *speedrun-info* category) (speedrun-category wascity-chase))))
                    (new 'static 'popup-menu-flag :label "Unlock Satellite"
                      :on-confirm (lambda () (set-category! *speedrun-info* (speedrun-category wascity-pre-game)))
                      :is-toggled? (lambda () (= (-> *speedrun-info* category) (speedrun-category wascity-pre-game))))
                    (new 'static 'popup-menu-flag :label "Learn to Drive a Vehicle"
                      :on-confirm (lambda () (set-category! *speedrun-info* (speedrun-category desert-turtle-training)))
                      :is-toggled? (lambda () (= (-> *speedrun-info* category) (speedrun-category desert-turtle-training))))
                    (new 'static 'popup-menu-flag :label "Beat Kleiver in Desert Race"
                      :on-confirm (lambda () (set-category! *speedrun-info* (speedrun-category desert-course-race)))
                      :is-toggled? (lambda () (= (-> *speedrun-info* category) (speedrun-category desert-course-race))))
                    (new 'static 'popup-menu-flag :label "Race For Artifacts"
                      :on-confirm (lambda () (set-category! *speedrun-info* (speedrun-category desert-artifact-race-1)))
                      :is-toggled? (lambda () (= (-> *speedrun-info* category) (speedrun-category desert-artifact-race-1))))
                    (new 'static 'popup-menu-flag :label "Beat Monks in Leaper Race"
                      :on-confirm (lambda () (set-category! *speedrun-info* (speedrun-category wascity-leaper-race)))
                      :is-toggled? (lambda () (= (-> *speedrun-info* category) (speedrun-category wascity-leaper-race))))
                    (new 'static 'popup-menu-flag :label "Destroy Metal Head Beasts"
                      :on-confirm (lambda () (set-category! *speedrun-info* (speedrun-category desert-hover)))
                      :is-toggled? (lambda () (= (-> *speedrun-info* category) (speedrun-category desert-hover))))
                    (new 'static 'popup-menu-flag :label "Earn 2nd War Amulet"
                      :on-confirm (lambda () (set-category! *speedrun-info* (speedrun-category arena-fight-2)))
                      :is-toggled? (lambda () (= (-> *speedrun-info* category) (speedrun-category arena-fight-2))))
                    (new 'static 'popup-menu-flag :label "Corral Wild Leapers"
                      :on-confirm (lambda () (set-category! *speedrun-info* (speedrun-category desert-catch-lizards)))
                      :is-toggled? (lambda () (= (-> *speedrun-info* category) (speedrun-category desert-catch-lizards))))
                    (new 'static 'popup-menu-flag :label "Rescue Wastelanders"
                      :on-confirm (lambda () (set-category! *speedrun-info* (speedrun-category desert-rescue)))
                      :is-toggled? (lambda () (= (-> *speedrun-info* category) (speedrun-category desert-rescue))))
                    (new 'static 'popup-menu-flag :label "Beat Turret Challenge"
                      :on-confirm (lambda () (set-category! *speedrun-info* (speedrun-category wascity-gungame)))
                      :is-toggled? (lambda () (= (-> *speedrun-info* category) (speedrun-category wascity-gungame))))
                    (new 'static 'popup-menu-flag :label "Defeat Marauders in Arena"
                      :on-confirm (lambda () (set-category! *speedrun-info* (speedrun-category arena-fight-3)))
                      :is-toggled? (lambda () (= (-> *speedrun-info* category) (speedrun-category arena-fight-3))))
                    (new 'static 'popup-menu-flag :label "Destroy Eggs in Nest"
                      :on-confirm (lambda () (set-category! *speedrun-info* (speedrun-category nest-eggs)))
                      :is-toggled? (lambda () (= (-> *speedrun-info* category) (speedrun-category nest-eggs))))
                    (new 'static 'popup-menu-flag :label "Climb Monk Temple Tower"
                      :on-confirm (lambda () (set-category! *speedrun-info* (speedrun-category temple-climb)))
                      :is-toggled? (lambda () (= (-> *speedrun-info* category) (speedrun-category temple-climb))))
                    (new 'static 'popup-menu-flag :label "Glide to Volcano"
                      :on-confirm (lambda () (set-category! *speedrun-info* (speedrun-category desert-glide)))
                      :is-toggled? (lambda () (= (-> *speedrun-info* category) (speedrun-category desert-glide))))
                    (new 'static 'popup-menu-flag :label "Find Satellite in Volcano"
                      :on-confirm (lambda () (set-category! *speedrun-info* (speedrun-category volcano-darkeco)))
                      :is-toggled? (lambda () (= (-> *speedrun-info* category) (speedrun-category volcano-darkeco))))
                    (new 'static 'popup-menu-flag :label "Find Oracle in Monk Temple"
                      :on-confirm (lambda () (set-category! *speedrun-info* (speedrun-category temple-oracle)))
                      :is-toggled? (lambda () (= (-> *speedrun-info* category) (speedrun-category temple-oracle))))
                    (new 'static 'popup-menu-flag :label "Defend Ashelin at Oasis"
                      :on-confirm (lambda () (set-category! *speedrun-info* (speedrun-category desert-oasis-defense)))
                      :is-toggled? (lambda () (= (-> *speedrun-info* category) (speedrun-category desert-oasis-defense))))
                    (new 'static 'popup-menu-flag :label "Complete Monk Temple Tests"
                      :on-confirm (lambda () (set-category! *speedrun-info* (speedrun-category temple-tests)))
                      :is-toggled? (lambda () (= (-> *speedrun-info* category) (speedrun-category temple-tests))))
                    (new 'static 'popup-menu-flag :label "Travel Through Catacomb Subrails"
                      :on-confirm (lambda () (set-category! *speedrun-info* (speedrun-category comb-travel)))
                      :is-toggled? (lambda () (= (-> *speedrun-info* category) (speedrun-category comb-travel))))
                    (new 'static 'popup-menu-flag :label "Explore Eco Mine"
                      :on-confirm (lambda () (set-category! *speedrun-info* (speedrun-category mine-explore)))
                      :is-toggled? (lambda () (= (-> *speedrun-info* category) (speedrun-category mine-explore))))
                    (new 'static 'popup-menu-flag :label "Escort Bomb Train"
                      :on-confirm (lambda () (set-category! *speedrun-info* (speedrun-category mine-blow)))
                      :is-toggled? (lambda () (= (-> *speedrun-info* category) (speedrun-category mine-blow))))
                    (new 'static 'popup-menu-flag :label "Defeat Veger's Precursor Robot"
                      :on-confirm (lambda () (set-category! *speedrun-info* (speedrun-category mine-boss)))
                      :is-toggled? (lambda () (= (-> *speedrun-info* category) (speedrun-category mine-boss))))
                    )
                  )
                 (new 'static 'popup-menu-submenu :label "Act 2 Individual Levels"
                  :entries (new 'static 'boxed-array :type popup-menu-entry 
                    (new 'static 'popup-menu-flag :label "Reach Port via Sewer"
                      :on-confirm (lambda () (set-category! *speedrun-info* (speedrun-category sewer-met-hum)))
                      :is-toggled? (lambda () (= (-> *speedrun-info* category) (speedrun-category sewer-met-hum))))
                    (new 'static 'popup-menu-flag :label "Destroy Incoming Blast Bots"
                      :on-confirm (lambda () (set-category! *speedrun-info* (speedrun-category city-port-fight)))
                      :is-toggled? (lambda () (= (-> *speedrun-info* category) (speedrun-category city-port-fight))))
                    (new 'static 'popup-menu-flag :label "Destroy Barrier With Missile"
                      :on-confirm (lambda () (set-category! *speedrun-info* (speedrun-category city-port-attack)))
                      :is-toggled? (lambda () (= (-> *speedrun-info* category) (speedrun-category city-port-attack))))
                    (new 'static 'popup-menu-flag :label "Beat Gun Course 1"
                      :on-confirm (lambda () (set-category! *speedrun-info* (speedrun-category city-gun-course-1)))
                      :is-toggled? (lambda () (= (-> *speedrun-info* category) (speedrun-category city-gun-course-1))))
                    (new 'static 'popup-menu-flag :label "Destroy Sniper Cannons"
                      :on-confirm (lambda () (set-category! *speedrun-info* (speedrun-category city-sniper-fight)))
                      :is-toggled? (lambda () (= (-> *speedrun-info* category) (speedrun-category city-sniper-fight))))
                    (new 'static 'popup-menu-flag :label "Reach Metal Head Area via Sewer"
                      :on-confirm (lambda () (set-category! *speedrun-info* (speedrun-category sewer-kg-met)))
                      :is-toggled? (lambda () (= (-> *speedrun-info* category) (speedrun-category sewer-kg-met))))
                    (new 'static 'popup-menu-flag :label "Destroy Dark Eco Tanks"
                      :on-confirm (lambda () (set-category! *speedrun-info* (speedrun-category city-destroy-darkeco)))
                      :is-toggled? (lambda () (= (-> *speedrun-info* category) (speedrun-category city-destroy-darkeco))))
                    (new 'static 'popup-menu-flag :label "Kill Dark Plants in Forest"
                      :on-confirm (lambda () (set-category! *speedrun-info* (speedrun-category forest-kill-plants)))
                      :is-toggled? (lambda () (= (-> *speedrun-info* category) (speedrun-category forest-kill-plants))))
                    (new 'static 'popup-menu-flag :label "Destroy Eco Grid With Jinx"
                      :on-confirm (lambda () (set-category! *speedrun-info* (speedrun-category city-destroy-grid)))
                      :is-toggled? (lambda () (= (-> *speedrun-info* category) (speedrun-category city-destroy-grid))))
                    (new 'static 'popup-menu-flag :label "Hijack Eco Vehicle"
                      :on-confirm (lambda () (set-category! *speedrun-info* (speedrun-category city-hijack-vehicle)))
                      :is-toggled? (lambda () (= (-> *speedrun-info* category) (speedrun-category city-hijack-vehicle))))
                    (new 'static 'popup-menu-flag :label "Defend Port From Attack"
                      :on-confirm (lambda () (set-category! *speedrun-info* (speedrun-category city-port-assault)))
                      :is-toggled? (lambda () (= (-> *speedrun-info* category) (speedrun-category city-port-assault))))
                    (new 'static 'popup-menu-flag :label "Beat Gun Course 2"
                      :on-confirm (lambda () (set-category! *speedrun-info* (speedrun-category city-gun-course-2)))
                      :is-toggled? (lambda () (= (-> *speedrun-info* category) (speedrun-category city-gun-course-2))))
                    (new 'static 'popup-menu-flag :label "Break Barrier with Blast Bot"
                      :on-confirm (lambda () (set-category! *speedrun-info* (speedrun-category city-blow-barricade)))
                      :is-toggled? (lambda () (= (-> *speedrun-info* category) (speedrun-category city-blow-barricade))))
                    (new 'static 'popup-menu-flag :label "Defend HQ From Attack"
                      :on-confirm (lambda () (set-category! *speedrun-info* (speedrun-category city-protect-hq)))
                      :is-toggled? (lambda () (= (-> *speedrun-info* category) (speedrun-category city-protect-hq))))
                    (new 'static 'popup-menu-flag :label "Find Switch in Sewers"
                      :on-confirm (lambda () (set-category! *speedrun-info* (speedrun-category sewer-hum-kg)))
                      :is-toggled? (lambda () (= (-> *speedrun-info* category) (speedrun-category sewer-hum-kg))))
                    (new 'static 'popup-menu-flag :label "Find Cypher In Eco Grid"
                      :on-confirm (lambda () (set-category! *speedrun-info* (speedrun-category city-power-game)))
                      :is-toggled? (lambda () (= (-> *speedrun-info* category) (speedrun-category city-power-game))))
                    (new 'static 'popup-menu-flag :label "Race For More Artifacts"
                      :on-confirm (lambda () (set-category! *speedrun-info* (speedrun-category desert-artifact-race-2)))
                      :is-toggled? (lambda () (= (-> *speedrun-info* category) (speedrun-category desert-artifact-race-2))))
                    (new 'static 'popup-menu-flag :label "Destroy Metal-pedes in Nest"
                      :on-confirm (lambda () (set-category! *speedrun-info* (speedrun-category nest-hunt)))
                      :is-toggled? (lambda () (= (-> *speedrun-info* category) (speedrun-category nest-hunt))))
                    (new 'static 'popup-menu-flag :label "Chase Down Metal Head Beasts"
                      :on-confirm (lambda () (set-category! *speedrun-info* (speedrun-category desert-beast-battle)))
                      :is-toggled? (lambda () (= (-> *speedrun-info* category) (speedrun-category desert-beast-battle))))
                    (new 'static 'popup-menu-flag :label "Defend Spargus' Front Gate"
                      :on-confirm (lambda () (set-category! *speedrun-info* (speedrun-category desert-jump-mission)))
                      :is-toggled? (lambda () (= (-> *speedrun-info* category) (speedrun-category desert-jump-mission))))
                    (new 'static 'popup-menu-flag :label "Take Out Marauder Stronghold"
                      :on-confirm (lambda () (set-category! *speedrun-info* (speedrun-category desert-chase-marauders)))
                      :is-toggled? (lambda () (= (-> *speedrun-info* category) (speedrun-category desert-chase-marauders))))
                    (new 'static 'popup-menu-flag :label "Beat Pillar Ring Challenges"
                      :on-confirm (lambda () (set-category! *speedrun-info* (speedrun-category forest-ring-chase)))
                      :is-toggled? (lambda () (= (-> *speedrun-info* category) (speedrun-category forest-ring-chase))))
                    (new 'static 'popup-menu-flag :label "Destroy War Factory Defenses"
                      :on-confirm (lambda () (set-category! *speedrun-info* (speedrun-category factory-sky-battle)))
                      :is-toggled? (lambda () (= (-> *speedrun-info* category) (speedrun-category factory-sky-battle))))
                    (new 'static 'popup-menu-flag :label "Explore War Factory"
                      :on-confirm (lambda () (set-category! *speedrun-info* (speedrun-category factory-assault)))
                      :is-toggled? (lambda () (= (-> *speedrun-info* category) (speedrun-category factory-assault))))
                    (new 'static 'popup-menu-flag :label "Beat Cyber-Errol Boss"
                      :on-confirm (lambda () (set-category! *speedrun-info* (speedrun-category factory-boss)))
                      :is-toggled? (lambda () (= (-> *speedrun-info* category) (speedrun-category factory-boss))))
                    )
                  )
                 (new 'static 'popup-menu-submenu :label "Act 3 Individual Levels"
                  :entries (new 'static 'boxed-array :type popup-menu-entry 
                    (new 'static 'popup-menu-flag :label "Rescue Seem at Temple"
                      :on-confirm (lambda () (set-category! *speedrun-info* (speedrun-category temple-defend)))
                      :is-toggled? (lambda () (= (-> *speedrun-info* category) (speedrun-category temple-defend))))
                    (new 'static 'popup-menu-flag :label "Defend Spargus From Attack"
                      :on-confirm (lambda () (set-category! *speedrun-info* (speedrun-category wascity-defend)))
                      :is-toggled? (lambda () (= (-> *speedrun-info* category) (speedrun-category wascity-defend))))
                    (new 'static 'popup-menu-flag :label "Activate Astro-Viewer in Forest"
                      :on-confirm (lambda () (set-category! *speedrun-info* (speedrun-category forest-turn-on-machine)))
                      :is-toggled? (lambda () (= (-> *speedrun-info* category) (speedrun-category forest-turn-on-machine))))
                    (new 'static 'popup-menu-flag :label "Destroy Dark Ship Shield"
                      :on-confirm (lambda () (set-category! *speedrun-info* (speedrun-category precursor-tour)))
                      :is-toggled? (lambda () (= (-> *speedrun-info* category) (speedrun-category precursor-tour))))
                    (new 'static 'popup-menu-flag :label "Blow Open Tower Door"
                      :on-confirm (lambda () (set-category! *speedrun-info* (speedrun-category city-blow-tower)))
                      :is-toggled? (lambda () (= (-> *speedrun-info* category) (speedrun-category city-blow-tower))))
                    (new 'static 'popup-menu-flag :label "Destroy Metal Head Tower"
                      :on-confirm (lambda () (set-category! *speedrun-info* (speedrun-category tower-destroy)))
                      :is-toggled? (lambda () (= (-> *speedrun-info* category) (speedrun-category tower-destroy))))
                    (new 'static 'popup-menu-flag :label "Reach Catacombs via Palace Ruins"
                      :on-confirm (lambda () (set-category! *speedrun-info* (speedrun-category palace-ruins-patrol)))
                      :is-toggled? (lambda () (= (-> *speedrun-info* category) (speedrun-category palace-ruins-patrol))))
                    (new 'static 'popup-menu-flag :label "Break Through Ruins"
                      :on-confirm (lambda () (set-category! *speedrun-info* (speedrun-category palace-ruins-attack)))
                      :is-toggled? (lambda () (= (-> *speedrun-info* category) (speedrun-category palace-ruins-attack))))
                    (new 'static 'popup-menu-flag :label "Reach Precursor Core"
                      :on-confirm (lambda () (set-category! *speedrun-info* (speedrun-category comb-wild-ride)))
                      :is-toggled? (lambda () (= (-> *speedrun-info* category) (speedrun-category comb-wild-ride))))
                    (new 'static 'popup-menu-flag :label "Destroy Dark Ship"
                      :on-confirm (lambda () (set-category! *speedrun-info* (speedrun-category precursor-destroy-ship)))
                      :is-toggled? (lambda () (= (-> *speedrun-info* category) (speedrun-category precursor-destroy-ship))))
                    (new 'static 'popup-menu-flag :label "Destroy Final Boss"
                      :on-confirm (lambda () (set-category! *speedrun-info* (speedrun-category desert-final-boss)))
                      :is-toggled? (lambda () (= (-> *speedrun-info* category) (speedrun-category desert-final-boss))))
                    )
                  )
                 )
          )
       (new 'static
            'popup-menu-dynamic-submenu
            :label "Custom Category Select"
            :get-length
            (lambda ()
              (pc-sr-mode-get-custom-category-amount))
            :get-entry-label
            (lambda ((index int) (str-dest string))
              (pc-sr-mode-get-custom-category-name index str-dest))
            :on-entry-confirm
            (lambda ((index int))
              ;; hydrate from cpp
              (pc-sr-mode-init-custom-category-info! index (-> *speedrun-info* active-custom-category))
              (set-category! *speedrun-info* (speedrun-category custom)))
            :entry-selected?
            (lambda ((index int))
              (and (= (-> *speedrun-info* category) (speedrun-category custom))
                   (= index (-> *speedrun-info* active-custom-category index)))))
       ;; TODO - disabled until finalized
       ; (new 'static
       ;      'popup-menu-dynamic-submenu
       ;      :label "Practice select"
       ;      :entry-disabled?
       ;      (lambda ()
       ;        (not (-> *speedrun-info* practicing?)))
       ;      :get-length
       ;      (lambda ()
       ;        (pc-sr-mode-get-practice-entries-amount))
       ;      :get-entry-label
       ;      (lambda ((index int) (str-dest string))
       ;        (pc-sr-mode-get-practice-entry-name index str-dest))
       ;      :on-entry-confirm
       ;      (lambda ((index int))
       ;        ;; turn on timer
       ;        (set! (-> (the speedrun-timer (ppointer->process (-> *speedrun-manager* 0 timer))) draw?) #t)
       ;        ;; tear down old processes
       ;        (when (nonzero? (-> *speedrun-info* active-practice-objective start-zone))
       ;          (deactivate (-> *speedrun-info* active-practice-objective start-zone 0)))
       ;        (when (nonzero? (-> *speedrun-info* active-practice-objective end-zone))
       ;          (deactivate (-> *speedrun-info* active-practice-objective end-zone 0)))
       ;        ;; init from cpp
       ;        (pc-sr-mode-init-practice-info! index (-> *speedrun-info* active-practice-objective))
       ;        ;; startup new processes
       ;        (set! (-> *speedrun-info* active-practice-objective start-zone)
       ;              (the (pointer objective-zone)
       ;                   (process-spawn objective-zone #t (-> *speedrun-info* active-practice-objective start-zone-init-params))))
       ;        (set! (-> *speedrun-info* active-practice-objective start-zone 0 on-exit)
       ;              (lambda ()
       ;                (start! (the speedrun-timer (ppointer->process (-> *speedrun-manager* 0 timer))))
       ;                (set! (-> *speedrun-info* waiting-to-record-practice-attempt?) #t)
       ;                (none)))
       ;        (set! (-> *speedrun-info* active-practice-objective start-zone 0 on-enter)
       ;              (lambda ()
       ;                (when (and *target* (>= (-> *target* control ctrl-xz-vel) (meters 30.0)))
       ;                  (vector-copy! (-> *target* control transv) *zero-vector*))
       ;                (set! (-> *speedrun-info* waiting-to-record-practice-attempt?) #f)
       ;                (reset! (the speedrun-timer (ppointer->process (-> *speedrun-manager* 0 timer))))
       ;                (none)))
       ;        (when (= 0 (-> *speedrun-info* active-practice-objective end-task))
       ;          (set! (-> *speedrun-info* active-practice-objective end-zone)
       ;                (the (pointer objective-zone)
       ;                     (process-spawn objective-zone #f (-> *speedrun-info* active-practice-objective end-zone-init-params))))
       ;          (set! (-> *speedrun-info* active-practice-objective end-zone 0 on-enter)
       ;                (lambda ()
       ;                  (when (-> *speedrun-info* waiting-to-record-practice-attempt?)
       ;                    (stop! (the speedrun-timer (ppointer->process (-> *speedrun-manager* 0 timer))))
       ;                    (if (pc-sr-mode-record-practice-entry-attempt! (-> *speedrun-info* active-practice-objective index)
       ;                                                                   #t
       ;                                                                   (&-> (the speedrun-timer (ppointer->process (-> *speedrun-manager* 0 timer))) recorded-time))
       ;                      (sound-play "skill-pickup")
       ;                      (sound-play "menu-pick"))
       ;                    (set! (-> *speedrun-info* waiting-to-record-practice-attempt?) #f))
       ;                  (none))))
       ;        (set! (-> *speedrun-info* practicing?) #t)
       ;        (reset! (-> *speedrun-info* active-practice-objective))
       ;        (set-master-mode 'game)
       ;        (send-event (ppointer->process (-> *speedrun-manager* 0 popup-menu)) 'close-menu))
       ;      :entry-selected?
       ;      (lambda ((index int))
       ;        (and (-> *speedrun-info* practicing?) (= index (-> *speedrun-info* active-practice-objective index)))))
       ; (new 'static
       ;      'popup-menu-button
       ;      :label "Stop practicing"
       ;      :entry-disabled?
       ;      (lambda ()
       ;        (not (-> *speedrun-info* practicing?)))
       ;      :on-confirm
       ;      (lambda ()
       ;        (when (-> *speedrun-info* practicing?)
       ;          (when (nonzero? (-> *speedrun-info* active-practice-objective start-zone))
       ;            (deactivate (-> *speedrun-info* active-practice-objective start-zone 0)))
       ;          (when (nonzero? (-> *speedrun-info* active-practice-objective end-zone))
       ;            (deactivate (-> *speedrun-info* active-practice-objective end-zone 0))))
       ;        (set! (-> *speedrun-info* practicing?) #f)
       ;        (set! (-> (the speedrun-timer (ppointer->process (-> *speedrun-manager* 0 timer))) draw?) #f)))
       (new 'static
            'popup-menu-submenu
            :label "Tools"
            :entries
            (new 'static
                 'boxed-array
                 :type
                 popup-menu-entry
                 (new 'static
                      'popup-menu-submenu
                      :label "Create custom category"
                      :entries
                      (new 'static
                           'boxed-array
                           :type
                           popup-menu-entry
                           (new 'static
                                'popup-menu-dynamic-submenu
                                :label "Select secrets"
                                :get-length
                                (lambda ()
                                  58)
                                :get-entry-label
                                (lambda ((index int) (str-dest string))
                                  (copy-string<-string str-dest (bitfield->string game-secrets index)))
                                :on-entry-confirm
                                (lambda ((index int))
                                  (logxor! (-> *speedrun-info* dump-custom-category secrets) (shl 1 index)))
                                :entry-selected?
                                (lambda ((index int))
                                  (logtest? (-> *speedrun-info* dump-custom-category secrets) (shl 1 index)))
                                :on-reset
                                (lambda ()
                                  (set! (-> *speedrun-info* dump-custom-category secrets) (game-secrets))))
                           (new 'static
                                'popup-menu-dynamic-submenu
                                :label "Select features"
                                :get-length
                                (lambda ()
                                  58)
                                :get-entry-label
                                (lambda ((index int) (str-dest string))
                                  (copy-string<-string str-dest (bitfield->string game-feature index)))
                                :on-entry-confirm
                                (lambda ((index int))
                                  (logxor! (-> *speedrun-info* dump-custom-category features) (shl 1 index)))
                                :entry-selected?
                                (lambda ((index int))
                                  (logtest? (-> *speedrun-info* dump-custom-category features) (shl 1 index)))
                                :on-reset
                                (lambda ()
                                  (set! (-> *speedrun-info* dump-custom-category features) (game-feature))))
                           (new 'static
                                'popup-menu-dynamic-submenu
                                :label "Select vehicles"
                                :get-length
                                (lambda ()
                                  8)
                                :get-entry-label
                                (lambda ((index int) (str-dest string))
                                  (copy-string<-string str-dest (bitfield->string game-vehicles index)))
                                :on-entry-confirm
                                (lambda ((index int))
                                  (logxor! (-> *speedrun-info* dump-custom-category vehicles) (shl 1 index)))
                                :entry-selected?
                                (lambda ((index int))
                                  (logtest? (-> *speedrun-info* dump-custom-category vehicles) (shl 1 index)))
                                :on-reset
                                (lambda ()
                                  (set! (-> *speedrun-info* dump-custom-category vehicles) (game-vehicles))))
                           (new 'static
                                'popup-menu-dynamic-submenu
                                :label "Forbid features"
                                :get-length
                                (lambda ()
                                  58)
                                :get-entry-label
                                (lambda ((index int) (str-dest string))
                                  (copy-string<-string str-dest (bitfield->string game-feature index)))
                                :on-entry-confirm
                                (lambda ((index int))
                                  (logxor! (-> *speedrun-info* dump-custom-category forbidden-features) (shl 1 index)))
                                :entry-selected?
                                (lambda ((index int))
                                  (logtest? (-> *speedrun-info* dump-custom-category forbidden-features) (shl 1 index)))
                                :on-reset
                                (lambda ()
                                  (set! (-> *speedrun-info* dump-custom-category forbidden-features) (game-feature))))
                           (new 'static
                                'popup-menu-dynamic-submenu
                                :label "Select cheats"
                                :get-length
                                (lambda ()
                                  17)
                                :get-entry-label
                                (lambda ((index int) (str-dest string))
                                  (copy-string<-string str-dest (bitfield->string pc-cheats index)))
                                :on-entry-confirm
                                (lambda ((index int))
                                  (logxor! (-> *speedrun-info* dump-custom-category pc-cheats) (shl 1 index)))
                                :entry-selected?
                                (lambda ((index int))
                                  (logtest? (-> *speedrun-info* dump-custom-category pc-cheats) (shl 1 index)))
                                :on-reset
                                (lambda ()
                                  (set! (-> *speedrun-info* dump-custom-category pc-cheats) (pc-cheats))))
                           (new 'static
                                'popup-menu-dynamic-submenu
                                :label "Select completed task"
                                :get-length
                                (lambda ()
                                  (dec (the int (game-task max))))
                                :get-entry-label
                                (lambda ((index int) (str-dest string))
                                  (copy-string<-string str-dest (enum->string game-task index)))
                                :on-entry-confirm
                                (lambda ((index int))
                                  (set! (-> *speedrun-info* dump-custom-category completed-task) (the game-task index)))
                                :entry-selected?
                                (lambda ((index int))
                                  (= (-> *speedrun-info* dump-custom-category completed-task) (the game-task index)))
                                :on-reset
                                (lambda ()
                                  (set! (-> *speedrun-info* dump-custom-category completed-task) (game-task none))))
                           (new 'static
                                'popup-menu-button
                                :label "Save new category to file"
                                :on-confirm
                                (lambda ()
                                  (pc-sr-mode-dump-new-custom-category (-> *speedrun-info* dump-custom-category))))))))
       (new 'static
            'popup-menu-button
            :label "Exit"
            :on-confirm
            (lambda ()
              (send-event (ppointer->process *speedrun-manager*) 'invoke (speedrun-menu-command exit))))))

(define *speedrun-manager* (the (pointer speedrun-manager) #f))

(defbehavior speedrun-manager-init-by-other speedrun-manager ()
  (process-mask-clear! (-> self mask) menu pause)
  (set! *speedrun-manager* (the (pointer speedrun-manager) (process->ppointer self)))
  (set! (-> self popup-menu) (process-spawn popup-menu "Speedrun Menu" *speedrun-popup-menu-entries* :to self))
  (set! (-> self timer) (process-spawn speedrun-timer :to self))
  (set! (-> self ignore-menu-toggle?) #f)
  (set! (-> self opened-with-start?) #f)
  (set! (-> *speedrun-info* practicing?) #f)
  (set! (-> *speedrun-info* waiting-to-record-practice-attempt?) #f)
  (go-virtual idle))

(defmethod update! ((this speedrun-info))
  "A per frame update for speedrunning related stuff"
  ;; Ensure the speedrunner menu process is enabled or destroyed
  (when (and (-> *pc-settings* speedrunner-mode?) (not *speedrun-manager*))
    (process-spawn speedrun-manager :from *pc-dead-pool* :to *pc-pool*))
  (when (and (not (-> *pc-settings* speedrunner-mode?)) *speedrun-manager*)
    (deactivate (-> *speedrun-manager* 0)))
  ;; do speedrunner mode things
  (when (-> *pc-settings* speedrunner-mode?)
    ;; Update auto-splitter struct
    (update! *autosplit-info-jak3*)
    ;; see if we should stop drawing the run info (when you finish arena training)
    (when (and (!= (-> this category) (speedrun-category custom))
               ;; (task-complete? *game-info* (game-task arena-training-1))
               (time-elapsed? (-> this run-started-at) (seconds 10))
               )
      (false! (-> this display-run-info?)))

    ;; if we have an end task...
    (when (!= (-> *speedrun-info* active-practice-objective end-task) (game-task none))
      ;; ensure timer is shown
      (set! (-> (the-as speedrun-timer (ppointer->process (-> *speedrun-manager* 0 timer))) draw?) #t)
      ;; stop timer if player finished the end-task
      (when (task-resolution-closed? (-> *speedrun-info* active-practice-objective end-task))
        (stop! (the-as speedrun-timer (ppointer->process (-> *speedrun-manager* 0 timer))))))
    
    ;; Draw info to the screen
    (when (and (not (-> *speedrun-info* practicing?)) (-> this display-run-info?))
      (draw-run-info this))
    ;; enforce settings even if they've changed them
    (enforce-settings! this)
    ;; draw objective info if practicing
    (when (-> *speedrun-info* practicing?)
      (draw-info (-> this active-practice-objective)))))

(defmethod draw-run-info ((this speedrun-info))
  "Draw speedrun related settings in the bottom left corner"
  (when (and (-> *pc-settings* speedrunner-mode?) (-> this display-run-info?))
    (clear *temp-string*)
    (clear *pc-encoded-temp-string*)
    (clear *pc-cpp-temp-string*)
    (cond
      ((= (-> this category) (speedrun-category custom))
       (pc-sr-mode-get-custom-category-name (-> this active-custom-category index) *pc-cpp-temp-string*)
       (format *temp-string*
               "<COLOR_WHITE>Category: <COLOR_GREEN>~S~%<COLOR_WHITE>Secrets: <COLOR_GREEN>~D~%<COLOR_WHITE>Features: <COLOR_GREEN>~D~%<COLOR_WHITE>Forbidden Features: <COLOR_GREEN>~D~%<COLOR_WHITE>Cheats: <COLOR_GREEN>~D~%<COLOR_WHITE>Version: <COLOR_GREEN>~S~%"
               *pc-cpp-temp-string*
               (-> this active-custom-category secrets)
               (-> this active-custom-category features)
               (-> this active-custom-category forbidden-features)
               (-> this active-custom-category pc-cheats)
               *pc-settings-built-sha*))
      (else
       (format *temp-string*
               "<COLOR_WHITE>Category: <COLOR_GREEN>~S~%<COLOR_WHITE>PC Cheats: <COLOR_GREEN>~S~%<COLOR_WHITE>Frame Rate: <COLOR_GREEN>~D~%<COLOR_WHITE>PS2 Actor Vis?: <COLOR_GREEN>~S~%<COLOR_WHITE>Version: <COLOR_GREEN>~S~%"
               (enum->string speedrun-category (-> this category))
               (if (= (-> *pc-settings* cheats) (pc-cheats)) "None" (pc-cheats->string (-> *pc-settings* cheats) *temp-string2*))
               (-> *pc-settings* target-fps)
               (if (-> *pc-settings* ps2-actor-vis?) "true" "false")
               *pc-settings-built-sha*)))
    (pc-encode-utf8-string *temp-string* *pc-encoded-temp-string*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf2))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf
                                    (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1))
                                    (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack
                           'font-context
                           *font-default-matrix*
                           510
                           (if (= (-> this category) (speedrun-category custom)) 355 365)
                           0.0
                           (font-color default)
                           (font-flags right shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-temp-string* buf font-ctx)))))

;; Speedrun Menu

(defmethod deactivate ((this speedrun-manager))
  (set! *speedrun-manager* (the (pointer speedrun-manager) #f))
  (call-parent-method this))

(defmethod draw-menu ((this speedrun-manager))
  ;; don't allow the menu to open during blackouts, apparently causes bugs
  (if (< (-> *game-info* blackout-time) (get-current-time))
    ;; handle opening and closing the menu
    (cond
      ((!= (-> *pc-settings* speedrunner-mode-custom-bind) 0)
       ;; the user has let go of the keybind completely or partially, allow the bind to trigger again
       (when (and (-> this ignore-menu-toggle?)
                  (!= (cpad-hold 0) (logior (cpad-hold 0) (-> *pc-settings* speedrunner-mode-custom-bind))))
         (false! (-> this ignore-menu-toggle?)))
       ;; bind handler
       (when (and (not (-> this ignore-menu-toggle?))
                  (= (cpad-hold 0) (logior (cpad-hold 0) (-> *pc-settings* speedrunner-mode-custom-bind))))
         (send-event (ppointer->process (-> this popup-menu)) 'open-menu)
         (logclear! (cpad-hold 0) (-> *pc-settings* speedrunner-mode-custom-bind))
         (logclear! (cpad-pressed 0) (-> *pc-settings* speedrunner-mode-custom-bind))
         (true! (-> this ignore-menu-toggle?))))
      (else
       (when (and (-> this ignore-menu-toggle?)
                  (or (not (cpad-hold? 0 l1)) (not (cpad-hold? 0 r1)))
                  (or (and (-> this opened-with-start?) (not (cpad-hold? 0 start)))
                      (and (not (-> this opened-with-start?)) (not (cpad-hold? 0 select)))))
         (set! (-> this ignore-menu-toggle?) #f))
       (when (and (cpad-hold? 0 l1)
                  (cpad-hold? 0 r1)
                  (or (cpad-hold? 0 select) (cpad-hold? 0 start))
                  (not (-> this ignore-menu-toggle?)))
         (send-event (ppointer->process (-> this popup-menu)) 'open-menu)
         (cpad-clear! 0 l1 r1)
         (cond
           ((cpad-hold? 0 select) (cpad-clear! 0 select) (false! (-> this opened-with-start?)))
           ((cpad-hold? 0 start) (cpad-clear! 0 start) (true! (-> this opened-with-start?))))
         (true! (-> this ignore-menu-toggle?)))))))

(defstate idle (speedrun-manager)
  :virtual #t
  :event
    (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
      (case message
        (('start-run) (set-time! (-> *speedrun-info* run-started-at)))
        (('invoke)
         (case (-> block param 0)
           (((speedrun-menu-command reset))
            (set! (-> (the-as speedrun-timer (ppointer->process (-> *speedrun-manager* 0 timer))) draw?) #f)
            (set-master-mode 'game)
            (send-event (ppointer->process (-> self popup-menu)) 'close-menu)
            (start-run! *speedrun-info*)
            )
           (((speedrun-menu-command exit)) (set-master-mode 'game) (send-event (ppointer->process (-> self popup-menu)) 'close-menu))
           (else (format 0 "nyi: invoke ~D~%" (-> block param 0)))))))
  :trans
    (behavior ()
      (draw-menu self))
  :code
    (behavior ()
      (until #f
        (when (and (-> *speedrun-info* practicing?) (cpad-pressed? 0 l3))
          (reset! (-> *speedrun-info* active-practice-objective)))
        (when (and (-> *speedrun-info* display-run-info?)
                  ;;  (= (-> *speedrun-info* category) (speedrun-category custom))
                   (time-elapsed? (-> *speedrun-info* run-started-at) (seconds 10)))
          (false! (-> *speedrun-info* display-run-info?)))
        (suspend))))
